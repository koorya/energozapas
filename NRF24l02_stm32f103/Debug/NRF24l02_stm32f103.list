
NRF24l02_stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001c28  08001c28  00011c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001cdc  08001cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ce0  08001ce0  00011ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08001ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000068  20000090  08001d74  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000f8  08001d74  000200f8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003d23  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000be2  00000000  00000000  00023ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000348  00000000  00000000  000249c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00024d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000019ff  00000000  00000000  00024fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000010e7  00000000  00000000  000269c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027aae  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000eb8  00000000  00000000  00027b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c10 	.word	0x08001c10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08001c10 	.word	0x08001c10

0800014c <ADC_work>:
#include <stdint.h>
#include <stm32f10x.h>


uint16_t ADC_work(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	static uint16_t A0_raw = 0;
	static uint8_t state = 0;

	if(state == 0){
 8000150:	4b16      	ldr	r3, [pc, #88]	; (80001ac <ADC_work+0x60>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d115      	bne.n	8000184 <ADC_work+0x38>
		// Режим одиночного преобразования (1 канал в регулярной группе)
		ADC1->SQR1 = 0;
 8000158:	4b15      	ldr	r3, [pc, #84]	; (80001b0 <ADC_work+0x64>)
 800015a:	2200      	movs	r2, #0
 800015c:	62da      	str	r2, [r3, #44]	; 0x2c
		ADC1->SQR2 = 0;
 800015e:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <ADC_work+0x64>)
 8000160:	2200      	movs	r2, #0
 8000162:	631a      	str	r2, [r3, #48]	; 0x30
		ADC1->SQR3 = 0;
 8000164:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <ADC_work+0x64>)
 8000166:	2200      	movs	r2, #0
 8000168:	635a      	str	r2, [r3, #52]	; 0x34

		// Выбираем канал для работы с АЦП (10,11,12,13) => 1 канал в регулярной группе (записываем номер канала для преобразования)
		ADC1->SQR3 = 1; //1й канал
 800016a:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <ADC_work+0x64>)
 800016c:	2201      	movs	r2, #1
 800016e:	635a      	str	r2, [r3, #52]	; 0x34
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000170:	4a0f      	ldr	r2, [pc, #60]	; (80001b0 <ADC_work+0x64>)
 8000172:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <ADC_work+0x64>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800017a:	6093      	str	r3, [r2, #8]
		state = 1;
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <ADC_work+0x60>)
 800017e:	2201      	movs	r2, #1
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e00d      	b.n	80001a0 <ADC_work+0x54>
	}else{

		if(ADC1->SR & ADC_SR_EOC){
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <ADC_work+0x64>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f003 0302 	and.w	r3, r3, #2
 800018c:	2b00      	cmp	r3, #0
 800018e:	d007      	beq.n	80001a0 <ADC_work+0x54>
			 A0_raw = ADC1->DR;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <ADC_work+0x64>)
 8000192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000194:	b29a      	uxth	r2, r3
 8000196:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <ADC_work+0x68>)
 8000198:	801a      	strh	r2, [r3, #0]
			 state = 0;
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <ADC_work+0x60>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
		}
	}

	return A0_raw;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <ADC_work+0x68>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000ac 	.word	0x200000ac
 80001b0:	40012400 	.word	0x40012400
 80001b4:	200000ae 	.word	0x200000ae

080001b8 <ADC_Init>:


// Инициализация переферии АЦП ( аналого-цифрового преобразователя )
void ADC_Init(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001bc:	4a44      	ldr	r2, [pc, #272]	; (80002d0 <ADC_Init+0x118>)
 80001be:	4b44      	ldr	r3, [pc, #272]	; (80002d0 <ADC_Init+0x118>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~( GPIO_CRL_MODE0 | GPIO_CRL_CNF0 );
 80001c8:	4a42      	ldr	r2, [pc, #264]	; (80002d4 <ADC_Init+0x11c>)
 80001ca:	4b42      	ldr	r3, [pc, #264]	; (80002d4 <ADC_Init+0x11c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f023 030f 	bic.w	r3, r3, #15
 80001d2:	6013      	str	r3, [r2, #0]

	// Настраиваем частоту тактирования модуля АЦП
	RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 80001d4:	4a3e      	ldr	r2, [pc, #248]	; (80002d0 <ADC_Init+0x118>)
 80001d6:	4b3e      	ldr	r3, [pc, #248]	; (80002d0 <ADC_Init+0x118>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80001de:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;
 80001e0:	4a3b      	ldr	r2, [pc, #236]	; (80002d0 <ADC_Init+0x118>)
 80001e2:	4b3b      	ldr	r3, [pc, #236]	; (80002d0 <ADC_Init+0x118>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	6053      	str	r3, [r2, #4]

	// Включаем тактирование переферии АЦП
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001e8:	4a39      	ldr	r2, [pc, #228]	; (80002d0 <ADC_Init+0x118>)
 80001ea:	4b39      	ldr	r3, [pc, #228]	; (80002d0 <ADC_Init+0x118>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]

	// Сброс всех настроек АЦП
	ADC1->SR = 0;
 80001f4:	4b38      	ldr	r3, [pc, #224]	; (80002d8 <ADC_Init+0x120>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]

	ADC1->CR1 = 0;
 80001fa:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <ADC_Init+0x120>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8000200:	4b35      	ldr	r3, [pc, #212]	; (80002d8 <ADC_Init+0x120>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]

	ADC1->SMPR1 = 0;
 8000206:	4b34      	ldr	r3, [pc, #208]	; (80002d8 <ADC_Init+0x120>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
	ADC1->SMPR2 = 0;
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <ADC_Init+0x120>)
 800020e:	2200      	movs	r2, #0
 8000210:	611a      	str	r2, [r3, #16]

	ADC1->JOFR1 = 0;
 8000212:	4b31      	ldr	r3, [pc, #196]	; (80002d8 <ADC_Init+0x120>)
 8000214:	2200      	movs	r2, #0
 8000216:	615a      	str	r2, [r3, #20]
	ADC1->JOFR2 = 0;
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <ADC_Init+0x120>)
 800021a:	2200      	movs	r2, #0
 800021c:	619a      	str	r2, [r3, #24]
	ADC1->JOFR3 = 0;
 800021e:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <ADC_Init+0x120>)
 8000220:	2200      	movs	r2, #0
 8000222:	61da      	str	r2, [r3, #28]
	ADC1->JOFR4 = 0;
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <ADC_Init+0x120>)
 8000226:	2200      	movs	r2, #0
 8000228:	621a      	str	r2, [r3, #32]

	ADC1->HTR = 0;
 800022a:	4b2b      	ldr	r3, [pc, #172]	; (80002d8 <ADC_Init+0x120>)
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
	ADC1->LTR = 0;
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <ADC_Init+0x120>)
 8000232:	2200      	movs	r2, #0
 8000234:	629a      	str	r2, [r3, #40]	; 0x28

	ADC1->SQR1 = 0;
 8000236:	4b28      	ldr	r3, [pc, #160]	; (80002d8 <ADC_Init+0x120>)
 8000238:	2200      	movs	r2, #0
 800023a:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0;
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <ADC_Init+0x120>)
 800023e:	2200      	movs	r2, #0
 8000240:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0;
 8000242:	4b25      	ldr	r3, [pc, #148]	; (80002d8 <ADC_Init+0x120>)
 8000244:	2200      	movs	r2, #0
 8000246:	635a      	str	r2, [r3, #52]	; 0x34

	ADC1->JSQR = 0;
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <ADC_Init+0x120>)
 800024a:	2200      	movs	r2, #0
 800024c:	639a      	str	r2, [r3, #56]	; 0x38

	ADC1->JDR1 = 0;
 800024e:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <ADC_Init+0x120>)
 8000250:	2200      	movs	r2, #0
 8000252:	63da      	str	r2, [r3, #60]	; 0x3c
	ADC1->JDR2 = 0;
 8000254:	4b20      	ldr	r3, [pc, #128]	; (80002d8 <ADC_Init+0x120>)
 8000256:	2200      	movs	r2, #0
 8000258:	641a      	str	r2, [r3, #64]	; 0x40
	ADC1->JDR3 = 0;
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <ADC_Init+0x120>)
 800025c:	2200      	movs	r2, #0
 800025e:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1->JDR4 = 0;
 8000260:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <ADC_Init+0x120>)
 8000262:	2200      	movs	r2, #0
 8000264:	649a      	str	r2, [r3, #72]	; 0x48

	ADC1->DR = 0;
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <ADC_Init+0x120>)
 8000268:	2200      	movs	r2, #0
 800026a:	64da      	str	r2, [r3, #76]	; 0x4c

	// Включаем работу АЦП (для проведения процесса автокалибровки)
	ADC1->CR2 |= ADC_CR2_ADON;
 800026c:	4a1a      	ldr	r2, [pc, #104]	; (80002d8 <ADC_Init+0x120>)
 800026e:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <ADC_Init+0x120>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6093      	str	r3, [r2, #8]

	// Сброс значений автокалибровки АЦП
	ADC1->CR2 |= ADC_CR2_RSTCAL;
 8000278:	4a17      	ldr	r2, [pc, #92]	; (80002d8 <ADC_Init+0x120>)
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <ADC_Init+0x120>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6093      	str	r3, [r2, #8]

	// Ждем окончания сброса значений автокалибровки АЦП
	while (ADC1->CR2 & ADC_CR2_RSTCAL) {}  // Пока не сросится бит ADC_CR2_RSTCAL
 8000284:	bf00      	nop
 8000286:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <ADC_Init+0x120>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	f003 0308 	and.w	r3, r3, #8
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1f9      	bne.n	8000286 <ADC_Init+0xce>

	// Запуск автокалибровки АЦП (выполнять каждый раз при инициализации АЦП от шины тактирования)
	ADC1->CR2 |= ADC_CR2_CAL;
 8000292:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <ADC_Init+0x120>)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <ADC_Init+0x120>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	6093      	str	r3, [r2, #8]

	// Ждем окончания калибровки АЦП
	while (ADC1->CR2 & ADC_CR2_CAL) {}  // Пока не сросится бит ADC_CR2_CAL
 800029e:	bf00      	nop
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <ADC_Init+0x120>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1f9      	bne.n	80002a0 <ADC_Init+0xe8>

	// Устанавливаем выравнивание значения по правому краю, запуск преобразования сигналом SWSTART в регистре ADC1->CR2 ADC_CR2_ALIGN |
	ADC1->CR2 |= ( ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_0 | ADC_CR2_EXTTRIG );
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <ADC_Init+0x120>)
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <ADC_Init+0x120>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 80002b6:	6093      	str	r3, [r2, #8]

	// Задаем промежуток между выборками работы АЦП в [ 41.5 + 12.5 = 53 ADC ] для 10, 11, 12, 13 каналов
	ADC1->SMPR2 |=  ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP1_2 | ADC_SMPR2_SMP2_2 | ADC_SMPR2_SMP3_2 ;
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <ADC_Init+0x120>)
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <ADC_Init+0x120>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	f443 6312 	orr.w	r3, r3, #2336	; 0x920
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6113      	str	r3, [r2, #16]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40012400 	.word	0x40012400

080002dc <delay_us>:

//==============================================================================
// Процедура программной задержки ~1 мкс
//==============================================================================
void delay_us(unsigned int us)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  unsigned int tick = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  
  while (us--)
 80002e8:	e007      	b.n	80002fa <delay_us+0x1e>
  {
    while (tick < 6)
    {
      tick++;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
    while (tick < 6)
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	2b05      	cmp	r3, #5
 80002f4:	d9f9      	bls.n	80002ea <delay_us+0xe>
    }
    tick = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  while (us--)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	1e5a      	subs	r2, r3, #1
 80002fe:	607a      	str	r2, [r7, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f5      	bne.n	80002f0 <delay_us+0x14>
  }
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <delay_ms>:

//==============================================================================
// Процедура программной задержки ~1 мс
//==============================================================================
void delay_ms(unsigned int ms)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b082      	sub	sp, #8
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
  while (ms--)
 8000316:	e003      	b.n	8000320 <delay_ms+0x12>
  {
    delay_us(1000);
 8000318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031c:	f7ff ffde 	bl	80002dc <delay_us>
  while (ms--)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	607a      	str	r2, [r7, #4]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1f6      	bne.n	8000318 <delay_ms+0xa>
  }
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <main>:
  
uint16_t ADC_work(void);
void ADC_Init(void);

int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b096      	sub	sp, #88	; 0x58
 8000338:	af02      	add	r7, sp, #8


//  gpio_PortClockStart(LED_Port);
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800033a:	4a53      	ldr	r2, [pc, #332]	; (8000488 <main+0x154>)
 800033c:	4b52      	ldr	r3, [pc, #328]	; (8000488 <main+0x154>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6193      	str	r3, [r2, #24]
  GPIOC->CRH |= GPIO_CRH_MODE13; //output 50MHz openDrain
 8000346:	4a51      	ldr	r2, [pc, #324]	; (800048c <main+0x158>)
 8000348:	4b50      	ldr	r3, [pc, #320]	; (800048c <main+0x158>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000350:	6053      	str	r3, [r2, #4]
//  gpio_SetGPIOmode_Out(LED_Port, LED_Pin);


  
  // Инициализация nRF24
  nrf24_init(SPI1, nRF_CHANNEL);
 8000352:	2146      	movs	r1, #70	; 0x46
 8000354:	484e      	ldr	r0, [pc, #312]	; (8000490 <main+0x15c>)
 8000356:	f000 fc9d 	bl	8000c94 <nrf24_init>
  // Настройка соединения, установка адреса
  nrf24_RxPipe_Setup(0, Addr, nRF_PaketLen);      // Если размер пакета = 0, то используется переменная длина пакета
 800035a:	2220      	movs	r2, #32
 800035c:	494d      	ldr	r1, [pc, #308]	; (8000494 <main+0x160>)
 800035e:	2000      	movs	r0, #0
 8000360:	f000 fb30 	bl	80009c4 <nrf24_RxPipe_Setup>
  



#if (nRF_isTX_DEMO)
  char statistic_str[] = "\033\143Packages 1000000000\r\nRetries  1000000000\r\nErrors   1000000000\r\n---\r\n";
 8000364:	4a4c      	ldr	r2, [pc, #304]	; (8000498 <main+0x164>)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4611      	mov	r1, r2
 800036a:	2247      	movs	r2, #71	; 0x47
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f815 	bl	800139c <memcpy>
  Len = nRF_PaketLen;
 8000372:	4b4a      	ldr	r3, [pc, #296]	; (800049c <main+0x168>)
 8000374:	2220      	movs	r2, #32
 8000376:	701a      	strb	r2, [r3, #0]
  ADC_Init();
 8000378:	f7ff ff1e 	bl	80001b8 <ADC_Init>
  usart2_init();
 800037c:	f000 ff60 	bl	8001240 <usart2_init>
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000380:	4a41      	ldr	r2, [pc, #260]	; (8000488 <main+0x154>)
 8000382:	4b41      	ldr	r3, [pc, #260]	; (8000488 <main+0x154>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
  GPIOB->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
 800038c:	4a44      	ldr	r2, [pc, #272]	; (80004a0 <main+0x16c>)
 800038e:	4b44      	ldr	r3, [pc, #272]	; (80004a0 <main+0x16c>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000396:	6053      	str	r3, [r2, #4]
  GPIOB->CRH |= GPIO_CRH_CNF11_1; //input pull-down
 8000398:	4a41      	ldr	r2, [pc, #260]	; (80004a0 <main+0x16c>)
 800039a:	4b41      	ldr	r3, [pc, #260]	; (80004a0 <main+0x16c>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a2:	6053      	str	r3, [r2, #4]
  GPIOB->BRR |= GPIO_BRR_BR11;
 80003a4:	4a3e      	ldr	r2, [pc, #248]	; (80004a0 <main+0x16c>)
 80003a6:	4b3e      	ldr	r3, [pc, #248]	; (80004a0 <main+0x16c>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ae:	6153      	str	r3, [r2, #20]
  uint8_t i = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  while (1)
  {
	if(i++ % 2)
 80003b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d004      	beq.n	80003d4 <main+0xa0>
		LED_ON;
 80003ca:	4b30      	ldr	r3, [pc, #192]	; (800048c <main+0x158>)
 80003cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003d0:	611a      	str	r2, [r3, #16]
 80003d2:	e003      	b.n	80003dc <main+0xa8>
	else
		LED_OFF;
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <main+0x158>)
 80003d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003da:	611a      	str	r2, [r3, #16]
    int8_t TryNum = nrf24_Send(Addr, Buff, Len);        // Отправка пакета
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <main+0x168>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	461a      	mov	r2, r3
 80003e2:	4930      	ldr	r1, [pc, #192]	; (80004a4 <main+0x170>)
 80003e4:	482b      	ldr	r0, [pc, #172]	; (8000494 <main+0x160>)
 80003e6:	f000 fb9b 	bl	8000b20 <nrf24_Send>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    if (TryNum >= 0)            // Пакет успешно был отправлен
 80003f0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db0c      	blt.n	8000412 <main+0xde>
    {
//    	LED_OFF;
    	Counter++;                // Считаем кол-во отправленных пакетов
 80003f8:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <main+0x174>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a2a      	ldr	r2, [pc, #168]	; (80004a8 <main+0x174>)
 8000400:	6013      	str	r3, [r2, #0]
    	TryCounter += TryNum;     // Считаем общее кол-во попыток отправки
 8000402:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8000406:	4b29      	ldr	r3, [pc, #164]	; (80004ac <main+0x178>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4413      	add	r3, r2
 800040c:	4a27      	ldr	r2, [pc, #156]	; (80004ac <main+0x178>)
 800040e:	6013      	str	r3, [r2, #0]
 8000410:	e01b      	b.n	800044a <main+0x116>
    }    
    else{
//    	LED_ON;
    	Err++;                    // Считаем кол-во ошибок при отправке
 8000412:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <main+0x17c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	3301      	adds	r3, #1
 8000418:	4a25      	ldr	r2, [pc, #148]	; (80004b0 <main+0x17c>)
 800041a:	6013      	str	r3, [r2, #0]
    	int16_t str_len = sprintf(statistic_str, "\033\143Packages %10d\r\nRetries  %10d\r\nErrors   %10d\r\n---\r\n", Counter, TryCounter, Err);
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <main+0x174>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <main+0x178>)
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <main+0x17c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	1d38      	adds	r0, r7, #4
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	460b      	mov	r3, r1
 800042e:	4921      	ldr	r1, [pc, #132]	; (80004b4 <main+0x180>)
 8000430:	f000 ffc0 	bl	80013b4 <siprintf>
 8000434:	4603      	mov	r3, r0
 8000436:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    	sendStrToUart2(statistic_str, str_len);
 800043a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800043e:	b2da      	uxtb	r2, r3
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 ff5f 	bl	8001308 <sendStrToUart2>
/*    disp1color_printf(0, 0, FONTID_10X16F, "250 kbps");
    disp1color_printf(0, 16, FONTID_10X16F, "Пакетов %d", Counter);
    disp1color_printf(0, 32, FONTID_10X16F, "Повторов %d", TryCounter);
    disp1color_printf(0, 48, FONTID_10X16F, "Ошибок %d", Err);
*/
    Buff[1] = (((uint32_t)ADC_work())*100)/4095; //in %
 800044a:	f7ff fe7f 	bl	800014c <ADC_work>
 800044e:	4603      	mov	r3, r0
 8000450:	461a      	mov	r2, r3
 8000452:	2364      	movs	r3, #100	; 0x64
 8000454:	fb03 f202 	mul.w	r2, r3, r2
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <main+0x184>)
 800045a:	fba3 1302 	umull	r1, r3, r3, r2
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	0852      	lsrs	r2, r2, #1
 8000462:	4413      	add	r3, r2
 8000464:	0adb      	lsrs	r3, r3, #11
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <main+0x170>)
 800046a:	705a      	strb	r2, [r3, #1]
    if(GPIOB->IDR & GPIO_IDR_IDR11)
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <main+0x16c>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000474:	2b00      	cmp	r3, #0
 8000476:	d003      	beq.n	8000480 <main+0x14c>
    	Buff[0] = 0x01;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <main+0x170>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e79a      	b.n	80003b6 <main+0x82>
    else
    	Buff[0] = 0x00;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <main+0x170>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
  {
 8000486:	e796      	b.n	80003b6 <main+0x82>
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	40013000 	.word	0x40013000
 8000494:	20000000 	.word	0x20000000
 8000498:	08001c60 	.word	0x08001c60
 800049c:	200000b0 	.word	0x200000b0
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	20000008 	.word	0x20000008
 80004a8:	200000b4 	.word	0x200000b4
 80004ac:	200000b8 	.word	0x200000b8
 80004b0:	200000bc 	.word	0x200000bc
 80004b4:	08001c28 	.word	0x08001c28
 80004b8:	00100101 	.word	0x00100101

080004bc <nrf24_read>:
//==============================================================================
// Функция выполняет операцию чтения группы байт из nRF24L01 в буфер pBuff командой Cmd
// Возвращает статусный байт
//==============================================================================
uint8_t nrf24_read(SPI_TypeDef* SPIx, uint8_t Cmd, uint8_t *pBuff, uint8_t Len)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	607a      	str	r2, [r7, #4]
 80004c6:	461a      	mov	r2, r3
 80004c8:	460b      	mov	r3, r1
 80004ca:	72fb      	strb	r3, [r7, #11]
 80004cc:	4613      	mov	r3, r2
 80004ce:	72bb      	strb	r3, [r7, #10]

	NRF24_CSN_LOW();
 80004d0:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <nrf24_read+0x54>)
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <nrf24_read+0x54>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	f023 0301 	bic.w	r3, r3, #1
 80004da:	60d3      	str	r3, [r2, #12]

  // Передаём байт команды, параллельно принимаем байт состояния
  uint8_t State = SPI_SendRecvByte(SPIx, Cmd);
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	4619      	mov	r1, r3
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 fcf9 	bl	8000ed8 <SPI_SendRecvByte>
 80004e6:	4603      	mov	r3, r0
 80004e8:	75fb      	strb	r3, [r7, #23]
  // Принимаем указанное кол-во байт
  SPI_recv8b(SPIx, pBuff, Len);
 80004ea:	7abb      	ldrb	r3, [r7, #10]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	f000 fcbe 	bl	8000e74 <SPI_recv8b>
  
  NRF24_CSN_HIGH();
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <nrf24_read+0x54>)
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <nrf24_read+0x54>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	60d3      	str	r3, [r2, #12]

  return State;
 8000504:	7dfb      	ldrb	r3, [r7, #23]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010c00 	.word	0x40010c00

08000514 <nrf24_write>:
//==============================================================================
// Фнкция выполняет операцию записи группы байт из буфера pBuff в nRF24L01 командой Cmd
// Возвращает статусный байт
//==============================================================================
uint8_t nrf24_write(SPI_TypeDef* SPIx, uint8_t Cmd, uint8_t *pBuff, uint8_t Len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	607a      	str	r2, [r7, #4]
 800051e:	461a      	mov	r2, r3
 8000520:	460b      	mov	r3, r1
 8000522:	72fb      	strb	r3, [r7, #11]
 8000524:	4613      	mov	r3, r2
 8000526:	72bb      	strb	r3, [r7, #10]
  NRF24_CSN_LOW();
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <nrf24_write+0x54>)
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <nrf24_write+0x54>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	60d3      	str	r3, [r2, #12]

  // Передаём байт команды, параллельно принимаем байт состояния
  uint8_t State = SPI_SendRecvByte(SPIx, Cmd);
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	4619      	mov	r1, r3
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f000 fccd 	bl	8000ed8 <SPI_SendRecvByte>
 800053e:	4603      	mov	r3, r0
 8000540:	75fb      	strb	r3, [r7, #23]
  // Передаём указанное кол-во байт
  SPI_send8b(SPIx, pBuff, Len);
 8000542:	7abb      	ldrb	r3, [r7, #10]
 8000544:	b29b      	uxth	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f000 fc6c 	bl	8000e28 <SPI_send8b>

  NRF24_CSN_HIGH();
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <nrf24_write+0x54>)
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <nrf24_write+0x54>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	60d3      	str	r3, [r2, #12]

  return State;
 800055c:	7dfb      	ldrb	r3, [r7, #23]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010c00 	.word	0x40010c00

0800056c <nrf24_read_reg>:

//==============================================================================
// Функция читает регистр из nRF24L01
//==============================================================================
uint8_t nrf24_read_reg(SPI_TypeDef* SPIx, uint8_t RegAddr)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
  RegAddr &= NRF24_REGADDR_MASK;
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	f003 031f 	and.w	r3, r3, #31
 800057e:	70fb      	strb	r3, [r7, #3]
  uint8_t Reg = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
  nrf24_read(SPIx, NRF24_CMD_R_REGISTER | RegAddr, &Reg, 1);
 8000584:	f107 020f 	add.w	r2, r7, #15
 8000588:	78f9      	ldrb	r1, [r7, #3]
 800058a:	2301      	movs	r3, #1
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff95 	bl	80004bc <nrf24_read>
  return Reg;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <nrf24_read_regs>:

//==============================================================================
// Функция читает группу регистров из nRF24L01 в буфер nRF24L01
//==============================================================================
uint8_t nrf24_read_regs(SPI_TypeDef* SPIx, uint8_t RegAddr, uint8_t *pBuff, uint8_t Len)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	461a      	mov	r2, r3
 80005a8:	460b      	mov	r3, r1
 80005aa:	72fb      	strb	r3, [r7, #11]
 80005ac:	4613      	mov	r3, r2
 80005ae:	72bb      	strb	r3, [r7, #10]
  RegAddr &= NRF24_REGADDR_MASK;
 80005b0:	7afb      	ldrb	r3, [r7, #11]
 80005b2:	f003 031f 	and.w	r3, r3, #31
 80005b6:	72fb      	strb	r3, [r7, #11]
  return nrf24_read(SPIx, NRF24_CMD_R_REGISTER | RegAddr, pBuff, Len);
 80005b8:	7abb      	ldrb	r3, [r7, #10]
 80005ba:	7af9      	ldrb	r1, [r7, #11]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f7ff ff7c 	bl	80004bc <nrf24_read>
 80005c4:	4603      	mov	r3, r0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <nrf24_write_reg>:

//==============================================================================
// Процедура записывает 1 регистр nRF24L01
//==============================================================================
void nrf24_write_reg(SPI_TypeDef* SPIx, uint8_t RegAddr, uint8_t Value)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	70fb      	strb	r3, [r7, #3]
 80005da:	4613      	mov	r3, r2
 80005dc:	70bb      	strb	r3, [r7, #2]
  RegAddr &= NRF24_REGADDR_MASK;
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	f003 031f 	and.w	r3, r3, #31
 80005e4:	70fb      	strb	r3, [r7, #3]
  nrf24_write(SPIx, NRF24_CMD_W_REGISTER | RegAddr, &Value, 1);
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	b2d9      	uxtb	r1, r3
 80005ee:	1cba      	adds	r2, r7, #2
 80005f0:	2301      	movs	r3, #1
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ff8e 	bl	8000514 <nrf24_write>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <nrf24_write_regs>:

//==============================================================================
// Функция записывает группу регистров nRF24L01 из буфера pBuff, возвращает статусный байт
//==============================================================================
uint8_t nrf24_write_regs(SPI_TypeDef* SPIx, uint8_t RegAddr, uint8_t *pBuff, uint8_t Len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	607a      	str	r2, [r7, #4]
 800060a:	461a      	mov	r2, r3
 800060c:	460b      	mov	r3, r1
 800060e:	72fb      	strb	r3, [r7, #11]
 8000610:	4613      	mov	r3, r2
 8000612:	72bb      	strb	r3, [r7, #10]
  RegAddr &= NRF24_REGADDR_MASK;
 8000614:	7afb      	ldrb	r3, [r7, #11]
 8000616:	f003 031f 	and.w	r3, r3, #31
 800061a:	72fb      	strb	r3, [r7, #11]
  return nrf24_write(SPIx, NRF24_CMD_W_REGISTER | RegAddr, pBuff, Len);
 800061c:	7afb      	ldrb	r3, [r7, #11]
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	b2d9      	uxtb	r1, r3
 8000624:	7abb      	ldrb	r3, [r7, #10]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f7ff ff73 	bl	8000514 <nrf24_write>
 800062e:	4603      	mov	r3, r0
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <nrf24_SetChannel>:

//==============================================================================
// Функция устанавливает № канала (0..127)
//==============================================================================
uint8_t nrf24_SetChannel(uint8_t Channel)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  Channel &= 0x7F;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000648:	b2db      	uxtb	r3, r3
 800064a:	71fb      	strb	r3, [r7, #7]
  return nrf24_write_regs(nrf24_SPIx, NRF24_REG_RF_CH, &Channel, 1);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <nrf24_SetChannel+0x2c>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	1dfa      	adds	r2, r7, #7
 8000652:	2301      	movs	r3, #1
 8000654:	2105      	movs	r1, #5
 8000656:	f7ff ffd3 	bl	8000600 <nrf24_write_regs>
 800065a:	4603      	mov	r3, r0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028

08000668 <nrf24_FlushRx>:

//==============================================================================
// Функция очищает входной FIFO-буфер пакетов
//==============================================================================
uint8_t nrf24_FlushRx(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  return nrf24_write(nrf24_SPIx, NRF24_CMD_FLUSH_RX, 0, 0);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <nrf24_FlushRx+0x18>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2200      	movs	r2, #0
 8000674:	21e2      	movs	r1, #226	; 0xe2
 8000676:	f7ff ff4d 	bl	8000514 <nrf24_write>
 800067a:	4603      	mov	r3, r0
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028

08000684 <nrf24_FlushTx>:

//==============================================================================
// Функция очищает выходной FIFO-буфер пакетов
//==============================================================================
uint8_t nrf24_FlushTx(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  return nrf24_write(nrf24_SPIx, NRF24_CMD_FLUSH_TX, 0, 0);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <nrf24_FlushTx+0x18>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	21e1      	movs	r1, #225	; 0xe1
 8000692:	f7ff ff3f 	bl	8000514 <nrf24_write>
 8000696:	4603      	mov	r3, r0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028

080006a0 <nrf24_Write_TxPayload>:

//==============================================================================
// Функция записывает пакет в выходной FIFO-буфер 
//==============================================================================
uint8_t nrf24_Write_TxPayload(uint8_t *pBuff, uint8_t Len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  if (Len > 32)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d901      	bls.n	80006b6 <nrf24_Write_TxPayload+0x16>
    Len = 32;
 80006b2:	2320      	movs	r3, #32
 80006b4:	70fb      	strb	r3, [r7, #3]
  return nrf24_write(nrf24_SPIx, NRF24_CMD_W_TX_PAYLOAD, pBuff, Len);
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <nrf24_Write_TxPayload+0x30>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	21a0      	movs	r1, #160	; 0xa0
 80006c0:	f7ff ff28 	bl	8000514 <nrf24_write>
 80006c4:	4603      	mov	r3, r0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028

080006d4 <nrf24_SetOutputPower>:

//==============================================================================
// Процедура устанавливает мощность передатчика. PowerLevel - мощность передатчика (0 = -18dBm; 1 = -12dBm; 2 = -6dBm; 3 = 0dBm)
//==============================================================================
void nrf24_SetOutputPower(uint8_t PowerLevel)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  tNrf24Reg06h RegValue; 
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_RF_SETUP, (uint8_t *) &RegValue, 1);
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <nrf24_SetOutputPower+0x4c>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	2301      	movs	r3, #1
 80006e8:	2106      	movs	r1, #6
 80006ea:	f7ff ff57 	bl	800059c <nrf24_read_regs>
  RegValue.bRF_PWR = (PowerLevel > 3) ? 3 : PowerLevel; 
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	bf28      	it	cs
 80006f4:	2303      	movcs	r3, #3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0303 	and.w	r3, r3, #3
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7b3b      	ldrb	r3, [r7, #12]
 8000700:	f362 0342 	bfi	r3, r2, #1, #2
 8000704:	733b      	strb	r3, [r7, #12]
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_RF_SETUP, (uint8_t *) &RegValue, 1);
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <nrf24_SetOutputPower+0x4c>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	f107 020c 	add.w	r2, r7, #12
 800070e:	2301      	movs	r3, #1
 8000710:	2106      	movs	r1, #6
 8000712:	f7ff ff75 	bl	8000600 <nrf24_write_regs>
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028

08000724 <nrf24_SetDataRate>:

//==============================================================================
// Процедура устанавливает частоту приёмо-передачи (см. константы NRF24_DataRate_*)
//==============================================================================
void nrf24_SetDataRate(uint8_t DataRate)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if (DataRate > 2)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d901      	bls.n	8000738 <nrf24_SetDataRate+0x14>
    DataRate = NRF24_DataRate_2MBps;
 8000734:	2302      	movs	r3, #2
 8000736:	71fb      	strb	r3, [r7, #7]
  
  tNrf24Reg06h RegValue; 
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_RF_SETUP, (uint8_t *) &RegValue, 1);
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <nrf24_SetDataRate+0x80>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	f107 020c 	add.w	r2, r7, #12
 8000740:	2301      	movs	r3, #1
 8000742:	2106      	movs	r1, #6
 8000744:	f7ff ff2a 	bl	800059c <nrf24_read_regs>
  
  // Значения битов bRF_DR_HIGH и bRF_DR_LOW. 00 = 1Mbps; 10 = 2Mbps; 01 = 250Kbps
  switch (DataRate)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d00c      	beq.n	8000768 <nrf24_SetDataRate+0x44>
 800074e:	2b02      	cmp	r3, #2
 8000750:	d013      	beq.n	800077a <nrf24_SetDataRate+0x56>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d11a      	bne.n	800078c <nrf24_SetDataRate+0x68>
  {
  case NRF24_DataRate_250KBps:
    RegValue.bRF_DR_HIGH = 0;
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	f36f 03c3 	bfc	r3, #3, #1
 800075c:	733b      	strb	r3, [r7, #12]
    RegValue.bRF_DR_LOW = 1;
 800075e:	7b3b      	ldrb	r3, [r7, #12]
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	733b      	strb	r3, [r7, #12]
    break;
 8000766:	e011      	b.n	800078c <nrf24_SetDataRate+0x68>
  case NRF24_DataRate_1MBps:
    RegValue.bRF_DR_HIGH = 0;
 8000768:	7b3b      	ldrb	r3, [r7, #12]
 800076a:	f36f 03c3 	bfc	r3, #3, #1
 800076e:	733b      	strb	r3, [r7, #12]
    RegValue.bRF_DR_LOW = 0;
 8000770:	7b3b      	ldrb	r3, [r7, #12]
 8000772:	f36f 1345 	bfc	r3, #5, #1
 8000776:	733b      	strb	r3, [r7, #12]
    break;
 8000778:	e008      	b.n	800078c <nrf24_SetDataRate+0x68>
  case NRF24_DataRate_2MBps:
    RegValue.bRF_DR_HIGH = 1;
 800077a:	7b3b      	ldrb	r3, [r7, #12]
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	733b      	strb	r3, [r7, #12]
    RegValue.bRF_DR_LOW = 0;
 8000782:	7b3b      	ldrb	r3, [r7, #12]
 8000784:	f36f 1345 	bfc	r3, #5, #1
 8000788:	733b      	strb	r3, [r7, #12]
    break;
 800078a:	bf00      	nop
  }
  
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_RF_SETUP, (uint8_t *) &RegValue, 1);
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <nrf24_SetDataRate+0x80>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	f107 020c 	add.w	r2, r7, #12
 8000794:	2301      	movs	r3, #1
 8000796:	2106      	movs	r1, #6
 8000798:	f7ff ff32 	bl	8000600 <nrf24_write_regs>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000028 	.word	0x20000028

080007a8 <nrf24_SetCRCLen>:

//==============================================================================
// Процедура устанавливает длину поля CRC (1 либо 2 байта). Если CRCLen = 0, то CRC отключается
//==============================================================================
void nrf24_SetCRCLen(uint8_t CRCLen)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  tNrf24Reg00h RegValue; 
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <nrf24_SetCRCLen+0x60>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f107 020c 	add.w	r2, r7, #12
 80007ba:	2301      	movs	r3, #1
 80007bc:	2100      	movs	r1, #0
 80007be:	f7ff feed 	bl	800059c <nrf24_read_regs>

  if (CRCLen)   // CRC должен быть включен
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00e      	beq.n	80007e6 <nrf24_SetCRCLen+0x3e>
  {
    RegValue.bEN_CRC = 1;
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	733b      	strb	r3, [r7, #12]
    RegValue.bCRC_O = (CRCLen == 1) ? 0 : 1;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	7b3b      	ldrb	r3, [r7, #12]
 80007de:	f362 0382 	bfi	r3, r2, #2, #1
 80007e2:	733b      	strb	r3, [r7, #12]
 80007e4:	e003      	b.n	80007ee <nrf24_SetCRCLen+0x46>
  }
  else          // CRC нужно отключить
    RegValue.bEN_CRC = 0;
 80007e6:	7b3b      	ldrb	r3, [r7, #12]
 80007e8:	f36f 03c3 	bfc	r3, #3, #1
 80007ec:	733b      	strb	r3, [r7, #12]
  
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <nrf24_SetCRCLen+0x60>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	2301      	movs	r3, #1
 80007f8:	2100      	movs	r1, #0
 80007fa:	f7ff ff01 	bl	8000600 <nrf24_write_regs>
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000028 	.word	0x20000028

0800080c <nrf24_SetDynLen>:

//==============================================================================
// Включаем/отключаем переменную длину пакета для соединения (pipe) с номером PipeNum
//==============================================================================
void nrf24_SetDynLen(uint8_t Pipe, uint8_t Enable)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
  uint8_t RegValue;
  if (Pipe >= NRF24_PipesNum)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b05      	cmp	r3, #5
 8000820:	d82c      	bhi.n	800087c <nrf24_SetDynLen+0x70>
    return;
  
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_DYNPD, &RegValue, 1);
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <nrf24_SetDynLen+0x78>)
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	f107 020f 	add.w	r2, r7, #15
 800082a:	2301      	movs	r3, #1
 800082c:	211c      	movs	r1, #28
 800082e:	f7ff feb5 	bl	800059c <nrf24_read_regs>

  if (Enable)
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00b      	beq.n	8000850 <nrf24_SetDynLen+0x44>
    RegValue |= (1 << Pipe);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2201      	movs	r2, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	b25a      	sxtb	r2, r3
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b25b      	sxtb	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e00c      	b.n	800086a <nrf24_SetDynLen+0x5e>
  else
    RegValue &= ~(1 << Pipe);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2201      	movs	r2, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	b25b      	sxtb	r3, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	b25a      	sxtb	r2, r3
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	4013      	ands	r3, r2
 8000864:	b25b      	sxtb	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	73fb      	strb	r3, [r7, #15]
  
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_DYNPD, &RegValue, 1);
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <nrf24_SetDynLen+0x78>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f107 020f 	add.w	r2, r7, #15
 8000872:	2301      	movs	r3, #1
 8000874:	211c      	movs	r1, #28
 8000876:	f7ff fec3 	bl	8000600 <nrf24_write_regs>
 800087a:	e000      	b.n	800087e <nrf24_SetDynLen+0x72>
    return;
 800087c:	bf00      	nop
}
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000028 	.word	0x20000028

08000888 <nrf24_DynPayload_OnOff>:

//==============================================================================
// Процедура разрешает/запрещает переменную длину глобально
//==============================================================================
void nrf24_DynPayload_OnOff(uint8_t Enable)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  nrf24_activate(nrf24_SPIx);
#endif

  // Разрешаем переменную длину пакета
  tNrf24Reg1Dh RegValue;
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_FEATURE, (uint8_t *) &RegValue, 1);
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <nrf24_DynPayload_OnOff+0x48>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	f107 020c 	add.w	r2, r7, #12
 800089a:	2301      	movs	r3, #1
 800089c:	211d      	movs	r1, #29
 800089e:	f7ff fe7d 	bl	800059c <nrf24_read_regs>
  RegValue.bEN_DPL = (Enable) ? 1 : 0;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	f362 0382 	bfi	r3, r2, #2, #1
 80008b4:	733b      	strb	r3, [r7, #12]
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_FEATURE, (uint8_t *) &RegValue, 1);
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <nrf24_DynPayload_OnOff+0x48>)
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	f107 020c 	add.w	r2, r7, #12
 80008be:	2301      	movs	r3, #1
 80008c0:	211d      	movs	r1, #29
 80008c2:	f7ff fe9d 	bl	8000600 <nrf24_write_regs>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000028 	.word	0x20000028

080008d4 <nrf24_AutoRetrasmission_Setup>:
// Процедура настраивает параметры автоматического повтора передачи при отсутствии ACK от приёмника.
// TryCount - кол-во повторов (0..15)
// TryPeriod - период между повторами. Считается как (TryPeriod + 1) * 250мкс
//==============================================================================
void nrf24_AutoRetrasmission_Setup(uint8_t TryCount, uint8_t TryPeriod)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
  tNrf24Reg04h RegValue;
  RegValue.bARC = (TryCount > 15) ? 15 : TryCount;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b0f      	cmp	r3, #15
 80008e8:	bf28      	it	cs
 80008ea:	230f      	movcs	r3, #15
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	7b3b      	ldrb	r3, [r7, #12]
 80008f6:	f362 0303 	bfi	r3, r2, #0, #4
 80008fa:	733b      	strb	r3, [r7, #12]
  RegValue.bARD = (TryPeriod > 15) ? 15 : TryPeriod;
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	bf28      	it	cs
 8000902:	230f      	movcs	r3, #15
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	b2da      	uxtb	r2, r3
 800090c:	7b3b      	ldrb	r3, [r7, #12]
 800090e:	f362 1307 	bfi	r3, r2, #4, #4
 8000912:	733b      	strb	r3, [r7, #12]
  
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_SETUP_RETR, (uint8_t *) &RegValue, 1);
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <nrf24_AutoRetrasmission_Setup+0x58>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	f107 020c 	add.w	r2, r7, #12
 800091c:	2301      	movs	r3, #1
 800091e:	2104      	movs	r1, #4
 8000920:	f7ff fe6e 	bl	8000600 <nrf24_write_regs>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000028 	.word	0x20000028

08000930 <nrf24_Set_PRX_Mode>:

//==============================================================================
// Процедура переводит модуль в режим приёмника (PRX)
//==============================================================================
void nrf24_Set_PRX_Mode(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  // Переключаемся в режим приёмника и будим nRF24 (PowerUp)
  tNrf24Reg00h RegValue;
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <nrf24_Set_PRX_Mode+0x68>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	1d3a      	adds	r2, r7, #4
 800093c:	2301      	movs	r3, #1
 800093e:	2100      	movs	r1, #0
 8000940:	f7ff fe2c 	bl	800059c <nrf24_read_regs>
  RegValue.bPRIM_RX = 1;        // Переключаемся в режим приёмника (PRX)
 8000944:	793b      	ldrb	r3, [r7, #4]
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	713b      	strb	r3, [r7, #4]
  RegValue.bPWR_UP = 1;         // Будим nRF24, если он спал
 800094c:	793b      	ldrb	r3, [r7, #4]
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	713b      	strb	r3, [r7, #4]
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <nrf24_Set_PRX_Mode+0x68>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	1d3a      	adds	r2, r7, #4
 800095a:	2301      	movs	r3, #1
 800095c:	2100      	movs	r1, #0
 800095e:	f7ff fe4f 	bl	8000600 <nrf24_write_regs>

  // Сбрасываем флаги прерываний nRF24
  nrf24_ResetStateFlags(NRF24_bMAX_RT_Mask | NRF24_bTX_DS_Mask | NRF24_bRX_DR_Mask);
 8000962:	2070      	movs	r0, #112	; 0x70
 8000964:	f000 f984 	bl	8000c70 <nrf24_ResetStateFlags>

  // Восстанавливаем адрес Rx для соединения №0, т.к. он мог быть затёрт при передаче
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_RX_ADDR_P0, RxPipes[0].Address, 5);
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <nrf24_Set_PRX_Mode+0x68>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	2305      	movs	r3, #5
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <nrf24_Set_PRX_Mode+0x6c>)
 8000970:	210a      	movs	r1, #10
 8000972:	f7ff fe45 	bl	8000600 <nrf24_write_regs>

  // Очищаем буферы FIFO
  nrf24_FlushRx();
 8000976:	f7ff fe77 	bl	8000668 <nrf24_FlushRx>
  nrf24_FlushTx();
 800097a:	f7ff fe83 	bl	8000684 <nrf24_FlushTx>

  NRF24_CE_HIGH();
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <nrf24_Set_PRX_Mode+0x70>)
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <nrf24_Set_PRX_Mode+0x70>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	60d3      	str	r3, [r2, #12]

  // Задержка как минимум 130 мкс
  delay_us(135);}
 800098a:	2087      	movs	r0, #135	; 0x87
 800098c:	f7ff fca6 	bl	80002dc <delay_us>
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000028 	.word	0x20000028
 800099c:	200000d1 	.word	0x200000d1
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <nrf24_Set_PTX_Mode>:

//==============================================================================
// Процедура переводит модуль в режим передатчика (PTX)
//==============================================================================
void nrf24_Set_PTX_Mode(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  NRF24_CE_LOW();
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <nrf24_Set_PTX_Mode+0x1c>)
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <nrf24_Set_PTX_Mode+0x1c>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	f023 0302 	bic.w	r3, r3, #2
 80009b2:	60d3      	str	r3, [r2, #12]
  // Очищаем буферы FIFO
  nrf24_FlushRx();
 80009b4:	f7ff fe58 	bl	8000668 <nrf24_FlushRx>
  nrf24_FlushTx();
 80009b8:	f7ff fe64 	bl	8000684 <nrf24_FlushTx>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <nrf24_RxPipe_Setup>:

//==============================================================================
// Процедура настраивает параметры приёма для соединения (pipe) с номером Pipe
//==============================================================================
void nrf24_RxPipe_Setup(uint8_t Pipe, uint8_t *pAddress, uint8_t PayloadSize)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
  // Некорректный номер соединения (pipe)
  if (Pipe >= NRF24_PipesNum)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	f200 8099 	bhi.w	8000b0e <nrf24_RxPipe_Setup+0x14a>
    return;
  // Ограничиваем длину пакета
  if (PayloadSize > 32)
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	2b20      	cmp	r3, #32
 80009e0:	d901      	bls.n	80009e6 <nrf24_RxPipe_Setup+0x22>
    PayloadSize = 32;
 80009e2:	2320      	movs	r3, #32
 80009e4:	71bb      	strb	r3, [r7, #6]
  
  // Сохраняем в структурах настройки указанного соединения (pipe)
  memcpy(RxPipes[Pipe].Address, pAddress, 5);
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <nrf24_RxPipe_Setup+0x154>)
 80009f2:	4413      	add	r3, r2
 80009f4:	3301      	adds	r3, #1
 80009f6:	2205      	movs	r2, #5
 80009f8:	6839      	ldr	r1, [r7, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fcce 	bl	800139c <memcpy>
  RxPipes[Pipe].PayLoadLen = PayloadSize;
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a08:	b2d9      	uxtb	r1, r3
 8000a0a:	4843      	ldr	r0, [pc, #268]	; (8000b18 <nrf24_RxPipe_Setup+0x154>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	18c2      	adds	r2, r0, r3
 8000a16:	7813      	ldrb	r3, [r2, #0]
 8000a18:	f361 0346 	bfi	r3, r1, #1, #6
 8000a1c:	7013      	strb	r3, [r2, #0]
  RxPipes[Pipe].bDynPayLoad = (PayloadSize) ? 0 : 1;
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2d9      	uxtb	r1, r3
 8000a2c:	483a      	ldr	r0, [pc, #232]	; (8000b18 <nrf24_RxPipe_Setup+0x154>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	18c2      	adds	r2, r0, r3
 8000a38:	7813      	ldrb	r3, [r2, #0]
 8000a3a:	f361 0300 	bfi	r3, r1, #0, #1
 8000a3e:	7013      	strb	r3, [r2, #0]
  nrf24_SetDynLen(Pipe, RxPipes[Pipe].bDynPayLoad);
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4935      	ldr	r1, [pc, #212]	; (8000b18 <nrf24_RxPipe_Setup+0x154>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	440b      	add	r3, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fed5 	bl	800080c <nrf24_SetDynLen>
  if (RxPipes[Pipe].bDynPayLoad)
 8000a62:	79fa      	ldrb	r2, [r7, #7]
 8000a64:	492c      	ldr	r1, [pc, #176]	; (8000b18 <nrf24_RxPipe_Setup+0x154>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	440b      	add	r3, r1
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <nrf24_RxPipe_Setup+0xbe>
    nrf24_DynPayload_OnOff(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff03 	bl	8000888 <nrf24_DynPayload_OnOff>
  
  // Для соединений 2..5 пишем только один последний байт адреса, остальные должны совпадать с байтами адреса соединения №1
  // Для соединений 0..1 пишем все 5 байт адреса
  if (Pipe < 2)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d809      	bhi.n	8000a9c <nrf24_RxPipe_Setup+0xd8>
    nrf24_write_regs(nrf24_SPIx, NRF24_REG_RX_ADDR_P0 + Pipe, pAddress, 5);
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <nrf24_RxPipe_Setup+0x158>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	330a      	adds	r3, #10
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	2305      	movs	r3, #5
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	f7ff fdb3 	bl	8000600 <nrf24_write_regs>
 8000a9a:	e008      	b.n	8000aae <nrf24_RxPipe_Setup+0xea>
  else
    nrf24_write_regs(nrf24_SPIx, NRF24_REG_RX_ADDR_P0 + Pipe, pAddress, 1);
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <nrf24_RxPipe_Setup+0x158>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	330a      	adds	r3, #10
 8000aa4:	b2d9      	uxtb	r1, r3
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	f7ff fda9 	bl	8000600 <nrf24_write_regs>

  if (!RxPipes[Pipe].bDynPayLoad)       // Размер пакета статический
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	4919      	ldr	r1, [pc, #100]	; (8000b18 <nrf24_RxPipe_Setup+0x154>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d108      	bne.n	8000ada <nrf24_RxPipe_Setup+0x116>
  {
    // Устанавливаем размер пакета для соединения
    nrf24_write_reg(nrf24_SPIx, NRF24_REG_RX_PW_P0 + Pipe, PayloadSize);
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <nrf24_RxPipe_Setup+0x158>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	3311      	adds	r3, #17
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f7ff fd7a 	bl	80005ce <nrf24_write_reg>
  }
  
  // Включаем приём из указанного соединения (pipe)
  uint8_t RegValue = nrf24_read_reg(nrf24_SPIx, NRF24_REG_EN_RXADDR);
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <nrf24_RxPipe_Setup+0x158>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd43 	bl	800056c <nrf24_read_reg>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  RegValue |= (1 << Pipe);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2201      	movs	r2, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	b25a      	sxtb	r2, r3
 8000af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	73fb      	strb	r3, [r7, #15]
  nrf24_write_reg(nrf24_SPIx, NRF24_REG_EN_RXADDR, RegValue);
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <nrf24_RxPipe_Setup+0x158>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	2102      	movs	r1, #2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fd61 	bl	80005ce <nrf24_write_reg>
 8000b0c:	e000      	b.n	8000b10 <nrf24_RxPipe_Setup+0x14c>
    return;
 8000b0e:	bf00      	nop
}
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000d0 	.word	0x200000d0
 8000b1c:	20000028 	.word	0x20000028

08000b20 <nrf24_Send>:
// Процедура отправляет пакет (передача пойдёт через соединение №0)
// Возвращает -1 в случае ошибки (не было ACK, кол-во повторов передачи истрачено)
// В случае успеха, возвращает кол-во повторов передачи
//==============================================================================
int8_t nrf24_Send(uint8_t *pAddress, uint8_t *pBuff, uint8_t Len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t State;
  int8_t ReturnVal = -1;
 8000b2e:	23ff      	movs	r3, #255	; 0xff
 8000b30:	75fb      	strb	r3, [r7, #23]
  tNrf24Reg00h RegValue;

  // Пишем адреса на передачу и приём с соединения №0
  //nrf24_write_regs(nrf24_SPIx, NRF24_REG_RX_ADDR_P0, pAddress, 5);
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_TX_ADDR, pAddress, 5);
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <nrf24_Send+0x128>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	2305      	movs	r3, #5
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	f7ff fd60 	bl	8000600 <nrf24_write_regs>

  nrf24_Set_PTX_Mode();
 8000b40:	f7ff ff30 	bl	80009a4 <nrf24_Set_PTX_Mode>
  
  // Переключаемся в режим передатчика и будим nRF24 (PowerUp)
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <nrf24_Send+0x128>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	f107 0214 	add.w	r2, r7, #20
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f7ff fd24 	bl	800059c <nrf24_read_regs>
  RegValue.bPRIM_RX = 0;        // Переключаемся в режим передатчика (PTX)
 8000b54:	7d3b      	ldrb	r3, [r7, #20]
 8000b56:	f36f 0300 	bfc	r3, #0, #1
 8000b5a:	753b      	strb	r3, [r7, #20]
  RegValue.bPWR_UP = 1;         // Будим nRF24, если он спал
 8000b5c:	7d3b      	ldrb	r3, [r7, #20]
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	753b      	strb	r3, [r7, #20]
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <nrf24_Send+0x128>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f107 0214 	add.w	r2, r7, #20
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f7ff fd46 	bl	8000600 <nrf24_write_regs>
  
  // Задержка минимум 130 мкс
  delay_us(135);
 8000b74:	2087      	movs	r0, #135	; 0x87
 8000b76:	f7ff fbb1 	bl	80002dc <delay_us>

  // Пишем в nRF24 тело пакета на передачу
  nrf24_Write_TxPayload(pBuff, Len);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	68b8      	ldr	r0, [r7, #8]
 8000b80:	f7ff fd8e 	bl	80006a0 <nrf24_Write_TxPayload>

  // Выдаём положительный импульс на ножку CE
  NRF24_CE_HIGH();
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <nrf24_Send+0x12c>)
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <nrf24_Send+0x12c>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	60d3      	str	r3, [r2, #12]
  delay_us(10);         // Задержка минимум 10 мкс
 8000b90:	200a      	movs	r0, #10
 8000b92:	f7ff fba3 	bl	80002dc <delay_us>
  NRF24_CE_LOW();
 8000b96:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <nrf24_Send+0x12c>)
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <nrf24_Send+0x12c>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f023 0302 	bic.w	r3, r3, #2
 8000ba0:	60d3      	str	r3, [r2, #12]

  // Ждём событий от nRF24
  NRF24_TO = NRF24_Tx_TimeOut;
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <nrf24_Send+0x130>)
 8000ba4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ba8:	801a      	strh	r2, [r3, #0]
  do
  {
    State = nrf24_ReadState();
 8000baa:	f000 f853 	bl	8000c54 <nrf24_ReadState>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	75bb      	strb	r3, [r7, #22]
    delay_us(100);
 8000bb2:	2064      	movs	r0, #100	; 0x64
 8000bb4:	f7ff fb92 	bl	80002dc <delay_us>
    NRF24_TO--;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <nrf24_Send+0x130>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <nrf24_Send+0x130>)
 8000bc2:	801a      	strh	r2, [r3, #0]
  }
  while ( (!(State & (NRF24_bMAX_RT_Mask | NRF24_bTX_DS_Mask))) && NRF24_TO);
 8000bc4:	7dbb      	ldrb	r3, [r7, #22]
 8000bc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <nrf24_Send+0xb6>
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <nrf24_Send+0x130>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1e9      	bne.n	8000baa <nrf24_Send+0x8a>
  
  if (NRF24_TO)
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <nrf24_Send+0x130>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <nrf24_Send+0xc4>
    nrf24_ResetStateFlags(NRF24_bMAX_RT_Mask | NRF24_bTX_DS_Mask);
 8000bde:	2030      	movs	r0, #48	; 0x30
 8000be0:	f000 f846 	bl	8000c70 <nrf24_ResetStateFlags>
    
  // Переключаемся в режим приёмника и переводим nRF24 в режим PowerDown
  nrf24_read_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <nrf24_Send+0x128>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	f107 0214 	add.w	r2, r7, #20
 8000bec:	2301      	movs	r3, #1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f7ff fcd4 	bl	800059c <nrf24_read_regs>
  RegValue.bPRIM_RX = 1;        // Переключаемся в режим приёмника (PRX)
 8000bf4:	7d3b      	ldrb	r3, [r7, #20]
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	753b      	strb	r3, [r7, #20]
  RegValue.bPWR_UP = 0;         // Усыпляем nRF24
 8000bfc:	7d3b      	ldrb	r3, [r7, #20]
 8000bfe:	f36f 0341 	bfc	r3, #1, #1
 8000c02:	753b      	strb	r3, [r7, #20]
  nrf24_write_regs(nrf24_SPIx, NRF24_REG_CONFIG, (uint8_t *) &RegValue, 1);
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <nrf24_Send+0x128>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f107 0214 	add.w	r2, r7, #20
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f7ff fcf6 	bl	8000600 <nrf24_write_regs>

  if (State & NRF24_bTX_DS_Mask)// Пакет был успешно отправлен (ACK получен), возвращаем кол-во перезапросов
 8000c14:	7dbb      	ldrb	r3, [r7, #22]
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00c      	beq.n	8000c38 <nrf24_Send+0x118>
  {
    // Читаем счётчики отправки
    tNrf24Reg08h Observe;
    nrf24_read_regs(nrf24_SPIx, NRF24_REG_OBSERVE_TX, (uint8_t *) &Observe, 1);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <nrf24_Send+0x128>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f107 0210 	add.w	r2, r7, #16
 8000c26:	2301      	movs	r3, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	f7ff fcb7 	bl	800059c <nrf24_read_regs>
    ReturnVal = Observe.bARC_CNT;
 8000c2e:	7c3b      	ldrb	r3, [r7, #16]
 8000c30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	75fb      	strb	r3, [r7, #23]
  }
  
  nrf24_Set_PRX_Mode();
 8000c38:	f7ff fe7a 	bl	8000930 <nrf24_Set_PRX_Mode>
  
  return ReturnVal;
 8000c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000028 	.word	0x20000028
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	200000c0 	.word	0x200000c0

08000c54 <nrf24_ReadState>:

//==============================================================================
// Функция читает статусный регистр nRF24
//==============================================================================
uint8_t nrf24_ReadState(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return nrf24_read(nrf24_SPIx, NRF24_CMD_NOP, 0, 0);
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <nrf24_ReadState+0x18>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	2200      	movs	r2, #0
 8000c60:	21ff      	movs	r1, #255	; 0xff
 8000c62:	f7ff fc2b 	bl	80004bc <nrf24_read>
 8000c66:	4603      	mov	r3, r0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000028 	.word	0x20000028

08000c70 <nrf24_ResetStateFlags>:

//==============================================================================
// Процедура сбрасывает состояние флагов прерываний
//==============================================================================
void nrf24_ResetStateFlags(uint8_t Flags)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  nrf24_write_reg(nrf24_SPIx, NRF24_REG_STATUS, Flags);
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <nrf24_ResetStateFlags+0x20>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	2107      	movs	r1, #7
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fca3 	bl	80005ce <nrf24_write_reg>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000028 	.word	0x20000028

08000c94 <nrf24_init>:

//==============================================================================
// Инициализация nRF24
//==============================================================================
void nrf24_init(SPI_TypeDef* SPIx, uint8_t Channel)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
  nrf24_SPIx = SPIx;
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <nrf24_init+0x98>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  
  // Инициализируем ножки CE, CSN

  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <nrf24_init+0x9c>)
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <nrf24_init+0x9c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6193      	str	r3, [r2, #24]

  GPIOB->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <nrf24_init+0xa0>)
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <nrf24_init+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 03cc 	bic.w	r3, r3, #204	; 0xcc
 8000cbc:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_MODE1 ;
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <nrf24_init+0xa0>)
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <nrf24_init+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8000cc8:	6013      	str	r3, [r2, #0]

  NRF24_CSN_HIGH();
 8000cca:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <nrf24_init+0xa0>)
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <nrf24_init+0xa0>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	60d3      	str	r3, [r2, #12]
  NRF24_CE_LOW();
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <nrf24_init+0xa0>)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <nrf24_init+0xa0>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	f023 0302 	bic.w	r3, r3, #2
 8000ce0:	60d3      	str	r3, [r2, #12]
  // Инициализируем SPI
  spim_init(SPIx, 8);
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f827 	bl	8000d38 <spim_init>
  
  // Задержка
  delay_ms(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f7ff fb0f 	bl	800030e <delay_ms>
  
  // Настраиваем автоповтор передачи
  nrf24_AutoRetrasmission_Setup(5, 2);          // 5 попыток с периодом 0.75 мс
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	f7ff fdee 	bl	80008d4 <nrf24_AutoRetrasmission_Setup>
  // Устанавливаем мощность передатчика
  nrf24_SetOutputPower(NRF24_OutPower_0dBm);    // 0dBm
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f7ff fceb 	bl	80006d4 <nrf24_SetOutputPower>
  // Устанавливаем частоту работы
  nrf24_SetDataRate(NRF24_DataRate_250KBps);//NRF24_DataRate_2MBps);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff fd10 	bl	8000724 <nrf24_SetDataRate>
  // Устанавливаем длину поля CRC (1 либо 2 байта)
  nrf24_SetCRCLen(2);
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fd4f 	bl	80007a8 <nrf24_SetCRCLen>
  // Сбрасываем флаги прерываний nRF24
  nrf24_ResetStateFlags(NRF24_bMAX_RT_Mask | NRF24_bTX_DS_Mask | NRF24_bRX_DR_Mask);
 8000d0a:	2070      	movs	r0, #112	; 0x70
 8000d0c:	f7ff ffb0 	bl	8000c70 <nrf24_ResetStateFlags>
  // Устанавливаем канал
  nrf24_SetChannel(Channel);
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc90 	bl	8000638 <nrf24_SetChannel>
  // Очищаем буферы Rx/Tx
  nrf24_FlushRx();
 8000d18:	f7ff fca6 	bl	8000668 <nrf24_FlushRx>
  nrf24_FlushTx();
 8000d1c:	f7ff fcb2 	bl	8000684 <nrf24_FlushTx>
  
  nrf24_Set_PRX_Mode();
 8000d20:	f7ff fe06 	bl	8000930 <nrf24_Set_PRX_Mode>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <spim_init>:

//==============================================================================
// Процедура инициализации spi (SPI1 или SPI2) в режиме master
//==============================================================================
void spim_init(SPI_TypeDef* SPIx, uint8_t WordLen)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
  // Стартуем тактирование GPIO и SPI
  if (SPIx == SPI1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a34      	ldr	r2, [pc, #208]	; (8000e18 <spim_init+0xe0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d108      	bne.n	8000d5e <spim_init+0x26>
  {
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN | RCC_APB2ENR_IOPAEN;
 8000d4c:	4a33      	ldr	r2, [pc, #204]	; (8000e1c <spim_init+0xe4>)
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <spim_init+0xe4>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	e00b      	b.n	8000d76 <spim_init+0x3e>
  }
  else
  {
	 RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <spim_init+0xe4>)
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <spim_init+0xe4>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	61d3      	str	r3, [r2, #28]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <spim_init+0xe4>)
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <spim_init+0xe4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6193      	str	r3, [r2, #24]
  }
  
  // Настраиваем SPI
  SPI_Cmd(SPIx, DISABLE); 
 8000d76:	2100      	movs	r1, #0
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f93f 	bl	8000ffc <SPI_Cmd>
  SPI_InitTypeDef SPI_InitStruct;
  SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;// SPI_Direction_1Line_Tx;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	81bb      	strh	r3, [r7, #12]
  SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000d82:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d86:	81fb      	strh	r3, [r7, #14]
  SPI_InitStruct.SPI_DataSize = (WordLen == 16) ? SPI_DataSize_16b : SPI_DataSize_8b;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b10      	cmp	r3, #16
 8000d8c:	d102      	bne.n	8000d94 <spim_init+0x5c>
 8000d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d92:	e000      	b.n	8000d96 <spim_init+0x5e>
 8000d94:	2300      	movs	r3, #0
 8000d96:	823b      	strh	r3, [r7, #16]
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	827b      	strh	r3, [r7, #18]
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	82bb      	strh	r3, [r7, #20]
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	82fb      	strh	r3, [r7, #22]
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8000da6:	2318      	movs	r3, #24
 8000da8:	833b      	strh	r3, [r7, #24]
  SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000daa:	2300      	movs	r3, #0
 8000dac:	837b      	strh	r3, [r7, #26]
  SPI_InitStruct.SPI_CRCPolynomial = 0x7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	83bb      	strh	r3, [r7, #28]
  SPI_Init(SPIx, &SPI_InitStruct);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f8dc 	bl	8000f76 <SPI_Init>
  SPI_Cmd(SPIx, ENABLE);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f91b 	bl	8000ffc <SPI_Cmd>
    

  // Настраиваем ноги GPIO для сигналов SCK и MOSI
  if (SPIx == SPI1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <spim_init+0xe0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d110      	bne.n	8000df0 <spim_init+0xb8>
  {
    GPIOA->CRL &= ~ (GPIO_CRL_CNF5 | GPIO_CRL_CNF7) ;
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <spim_init+0xe8>)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <spim_init+0xe8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000dd8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ddc:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE5_1 | GPIO_CRL_MODE5_0 | GPIO_CRL_CNF5_1 |
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <spim_init+0xe8>)
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <spim_init+0xe8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8000de8:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8000dec:	6013      	str	r3, [r2, #0]
  }
  else
  {
	  //PB14
  }
}
 8000dee:	e00f      	b.n	8000e10 <spim_init+0xd8>
    GPIOB->CRL &= ~ (GPIO_CRH_CNF13 | GPIO_CRH_CNF15) ;
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <spim_init+0xec>)
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <spim_init+0xec>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000dfa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000dfe:	6013      	str	r3, [r2, #0]
    GPIOB->CRH |= GPIO_CRH_MODE13_1 | GPIO_CRH_MODE13_0 | GPIO_CRH_CNF13_1 |
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <spim_init+0xec>)
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <spim_init+0xec>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8000e0a:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8000e0e:	6053      	str	r3, [r2, #4]
}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <SPI_send8b>:

//==============================================================================
// Процедура отправляет массив 8-битных слов
//==============================================================================
void SPI_send8b(SPI_TypeDef* SPIx, uint8_t *pBuff, uint16_t Len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < Len; i++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	82fb      	strh	r3, [r7, #22]
 8000e3a:	e013      	b.n	8000e64 <SPI_send8b+0x3c>
  {
    SPI_I2S_SendData(SPIx, *(pBuff++));
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f000 f8f6 	bl	800103a <SPI_I2S_SendData>
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET) ;
 8000e4e:	bf00      	nop
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f000 f90b 	bl	800106e <SPI_I2S_GetFlagStatus>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d0f8      	beq.n	8000e50 <SPI_send8b+0x28>
  for (uint16_t i = 0; i < Len; i++)
 8000e5e:	8afb      	ldrh	r3, [r7, #22]
 8000e60:	3301      	adds	r3, #1
 8000e62:	82fb      	strh	r3, [r7, #22]
 8000e64:	8afa      	ldrh	r2, [r7, #22]
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3e7      	bcc.n	8000e3c <SPI_send8b+0x14>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SPI_recv8b>:

//==============================================================================
// Процедура отправляет массив 8-битных слов
//==============================================================================
void SPI_recv8b(SPI_TypeDef* SPIx, uint8_t *pBuff, uint16_t Len)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < Len; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	82fb      	strh	r3, [r7, #22]
 8000e86:	e01f      	b.n	8000ec8 <SPI_recv8b+0x54>
  {
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 8000e88:	bf00      	nop
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 f8ee 	bl	800106e <SPI_I2S_GetFlagStatus>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f8      	beq.n	8000e8a <SPI_recv8b+0x16>
    SPI_I2S_SendData(SPIx, 0xFF);
 8000e98:	21ff      	movs	r1, #255	; 0xff
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f000 f8cd 	bl	800103a <SPI_I2S_SendData>
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET) ;
 8000ea0:	bf00      	nop
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f8e2 	bl	800106e <SPI_I2S_GetFlagStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d0f8      	beq.n	8000ea2 <SPI_recv8b+0x2e>
    //while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
    *(pBuff++) = SPI_I2S_ReceiveData(SPIx);
 8000eb0:	68bc      	ldr	r4, [r7, #8]
 8000eb2:	1c63      	adds	r3, r4, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f8cd 	bl	8001056 <SPI_I2S_ReceiveData>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < Len; i++)
 8000ec2:	8afb      	ldrh	r3, [r7, #22]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	82fb      	strh	r3, [r7, #22]
 8000ec8:	8afa      	ldrh	r2, [r7, #22]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3db      	bcc.n	8000e88 <SPI_recv8b+0x14>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <SPI_SendRecvByte>:

//==============================================================================
// Процедура отправляет 1 байт и возвращает принятый байт
//==============================================================================
uint8_t SPI_SendRecvByte(SPI_TypeDef* SPIx, uint8_t TxByte)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 8000ee4:	bf00      	nop
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f8c0 	bl	800106e <SPI_I2S_GetFlagStatus>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f8      	beq.n	8000ee6 <SPI_SendRecvByte+0xe>
  SPI_I2S_SendData(SPIx, TxByte);
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f89d 	bl	800103a <SPI_I2S_SendData>
  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET) ;
 8000f00:	bf00      	nop
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f8b2 	bl	800106e <SPI_I2S_GetFlagStatus>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d0f8      	beq.n	8000f02 <SPI_SendRecvByte+0x2a>
  //while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
  return SPI_I2S_ReceiveData(SPIx);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f8a0 	bl	8001056 <SPI_I2S_ReceiveData>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b2db      	uxtb	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f2a:	e003      	b.n	8000f34 <LoopCopyDataInit>

08000f2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000f2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f32:	3104      	adds	r1, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000f38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f3c:	d3f6      	bcc.n	8000f2c <CopyDataInit>
	ldr	r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000f40:	e002      	b.n	8000f48 <LoopFillZerobss>

08000f42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f44:	f842 3b04 	str.w	r3, [r2], #4

08000f48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000f4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f4c:	d3f9      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f4e:	f000 f8a9 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f000 f9ff 	bl	8001354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff f9ed 	bl	8000334 <main>
	bx	lr
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f5c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000f60:	08001ce4 	.word	0x08001ce4
	ldr	r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f68:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000f6c:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000f70:	200000f8 	.word	0x200000f8

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>

08000f76 <SPI_Init>:
  *   contains the configuration information for the specified
  *   SPI peripheral.
  * @retval : None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	81fb      	strh	r3, [r7, #14]
  /* Check the SPI parameters */


/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000f90:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	881a      	ldrh	r2, [r3, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	885b      	ldrh	r3, [r3, #2]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	89fa      	ldrh	r2, [r7, #14]
 8000fd8:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	8b9b      	ldrh	r3, [r3, #28]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	8a1a      	ldrh	r2, [r3, #16]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	821a      	strh	r2, [r3, #16]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SPI_Cmd>:
  * @param NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval : None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */

  if (NewState != DISABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d008      	beq.n	8001020 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 800101e:	e007      	b.n	8001030 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800102a:	b29a      	uxth	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	801a      	strh	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <SPI_I2S_SendData>:
  *   2 or 3 in I2S mode
  * @param Data : Data to be transmitted..
  * @retval : None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */

  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	887a      	ldrh	r2, [r7, #2]
 800104a:	819a      	strh	r2, [r3, #12]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <SPI_I2S_ReceiveData>:
  *   1, 2 or 3 in SPI mode 
  *   2 or 3 in I2S mode
  * @retval : The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */

  
  /* Return the data in the DR register */
  return SPIx->DR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	899b      	ldrh	r3, [r3, #12]
 8001062:	b29b      	uxth	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <SPI_I2S_GetFlagStatus>:
  * @arg I2S_FLAG_UDR: Underrun Error flag.
  * @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval : The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */


  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	891b      	ldrh	r3, [r3, #8]
 8001082:	b29a      	uxth	r2, r3
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	4013      	ands	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e001      	b.n	8001098 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010a8:	4a15      	ldr	r2, [pc, #84]	; (8001100 <SystemInit+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <SystemInit+0x5c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80010b4:	4912      	ldr	r1, [pc, #72]	; (8001100 <SystemInit+0x5c>)
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <SystemInit+0x5c>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <SystemInit+0x60>)
 80010bc:	4013      	ands	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <SystemInit+0x5c>)
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <SystemInit+0x5c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <SystemInit+0x5c>)
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <SystemInit+0x5c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <SystemInit+0x5c>)
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SystemInit+0x5c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SystemInit+0x5c>)
 80010ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010ee:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80010f0:	f000 f80c 	bl	800110c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SystemInit+0x64>)
 80010f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	f8ff0000 	.word	0xf8ff0000
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001110:	f000 f802 	bl	8001118 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001126:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <SetSysClockTo72+0xf8>)
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <SetSysClockTo72+0xf8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <SetSysClockTo72+0xf8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3301      	adds	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d103      	bne.n	8001150 <SetSysClockTo72+0x38>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800114e:	d1f0      	bne.n	8001132 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <SetSysClockTo72+0xf8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800115c:	2301      	movs	r3, #1
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	e001      	b.n	8001166 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d14b      	bne.n	8001204 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800116c:	4a29      	ldr	r2, [pc, #164]	; (8001214 <SetSysClockTo72+0xfc>)
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <SetSysClockTo72+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001178:	4a26      	ldr	r2, [pc, #152]	; (8001214 <SetSysClockTo72+0xfc>)
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <SetSysClockTo72+0xfc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <SetSysClockTo72+0xfc>)
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <SetSysClockTo72+0xfc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <SetSysClockTo72+0xf8>)
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <SetSysClockTo72+0xf8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001198:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <SetSysClockTo72+0xf8>)
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <SetSysClockTo72+0xf8>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <SetSysClockTo72+0xf8>)
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <SetSysClockTo72+0xf8>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80011ac:	4a18      	ldr	r2, [pc, #96]	; (8001210 <SetSysClockTo72+0xf8>)
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <SetSysClockTo72+0xf8>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80011b6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <SetSysClockTo72+0xf8>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <SetSysClockTo72+0xf8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80011c2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <SetSysClockTo72+0xf8>)
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <SetSysClockTo72+0xf8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ce:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011d0:	bf00      	nop
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <SetSysClockTo72+0xf8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <SetSysClockTo72+0xf8>)
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <SetSysClockTo72+0xf8>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 0303 	bic.w	r3, r3, #3
 80011e8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <SetSysClockTo72+0xf8>)
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <SetSysClockTo72+0xf8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80011f6:	bf00      	nop
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SetSysClockTo72+0xf8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d1f9      	bne.n	80011f8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	40022000 	.word	0x40022000

08001218 <DMA1_Channel7_IRQHandler>:
#include <stdint.h>
#include <stm32f10x.h>

void DMA1_Channel7_IRQHandler(void){ //прерывание DMA по событию окончания передачи (в канал от usart2)
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF7){ // A transfer complete (TC) event occurred on channel 7
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <DMA1_Channel7_IRQHandler+0x24>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <DMA1_Channel7_IRQHandler+0x1c>
		DMA1->IFCR |= DMA_IFCR_CTCIF7; //Clears the corresponding TCIF flag in the DMA_ISR register
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <DMA1_Channel7_IRQHandler+0x24>)
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <DMA1_Channel7_IRQHandler+0x24>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001232:	6053      	str	r3, [r2, #4]
	}
//	DMA1->IFCR |= 0x0fffffff; //сбрасываем флаги всех событий (на всякий случай, хз)
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40020000 	.word	0x40020000

08001240 <usart2_init>:
	}
}
*/

void usart2_init(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN; // PA2-Tx PA3-Rx (gpioa к шине тактирования, альтернативные функции к шине тактирования)
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <usart2_init+0xb4>)
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <usart2_init+0xb4>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f043 0305 	orr.w	r3, r3, #5
 800124e:	6193      	str	r3, [r2, #24]
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN; //USART2 - PA2-Tx PA3-Rx , тактирование от APB1 (36MHz для этого проекта)
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <usart2_init+0xb4>)
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <usart2_init+0xb4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	61d3      	str	r3, [r2, #28]

//Tx PA2 (no remap, usart2)
		GPIOA->CRL	&= ~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2;
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <usart2_init+0xb8>)
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <usart2_init+0xb8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001266:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |= GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2; //CNF2 0b10 PP alt, MODE2 0b11 Output mode max speed 50 MHz
 8001268:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <usart2_init+0xb8>)
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <usart2_init+0xb8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8001272:	6013      	str	r3, [r2, #0]
//Rx PA3
		GPIOA->CRL &= ~GPIO_CRL_CNF3 & ~GPIO_CRL_MODE3;
		GPIOA->CRL |= GPIO_CRL_CNF3_0 ; //input
**/
//		USART2->BRR =  0x753; //(36 000 000/19200)/16 = 117.18 ; //тут надо пересвчитать по формуле, целую и дробную часть (на самом деле, мантиссу и сдвиг)
		USART2->BRR =  0x138; //(36 000 000/115200)/16 = 19.53 ; //тут надо пересвчитать по формуле, целую и дробную часть (на самом деле, мантиссу и сдвиг)
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <usart2_init+0xbc>)
 8001276:	f44f 729c 	mov.w	r2, #312	; 0x138
 800127a:	811a      	strh	r2, [r3, #8]

		USART2->CR1 = 0;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <usart2_init+0xbc>)
 800127e:	2200      	movs	r2, #0
 8001280:	819a      	strh	r2, [r3, #12]
		USART2->CR1 |= 	//USART_CR1_TCIE	| //tr_compl interr
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <usart2_init+0xbc>)
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <usart2_init+0xbc>)
 8001286:	899b      	ldrh	r3, [r3, #12]
 8001288:	b29b      	uxth	r3, r3
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	8193      	strh	r3, [r2, #12]
								//USART_CR1_PS			| // odd parity нечетный
								USART_CR1_TE 			|	//Transmitter enable
								//USART_CR1_RE 			; //Receiver enable
									0;

		USART2->CR2 = 0;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <usart2_init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	821a      	strh	r2, [r3, #16]

		USART2->CR3 |= USART_CR3_DMAT; //подключаем DMA
 8001298:	4a18      	ldr	r2, [pc, #96]	; (80012fc <usart2_init+0xbc>)
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <usart2_init+0xbc>)
 800129c:	8a9b      	ldrh	r3, [r3, #20]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	8293      	strh	r3, [r2, #20]

		USART2->CR1 |= USART_CR1_UE; //включаем UART2
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <usart2_init+0xbc>)
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <usart2_init+0xbc>)
 80012ac:	899b      	ldrh	r3, [r3, #12]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	8193      	strh	r3, [r2, #12]
		USART2->SR &= ~USART_SR_TC; //сбрасываем флаг конца передачи, для того, чтобы сформировать запрос к DMA
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <usart2_init+0xbc>)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <usart2_init+0xbc>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	8013      	strh	r3, [r2, #0]

		RCC->AHBENR |= RCC_AHBENR_DMA1EN; //включаем тактирование DMA
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <usart2_init+0xb4>)
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <usart2_init+0xb4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6153      	str	r3, [r2, #20]
		DMA1_Channel7->CCR |= DMA_CCR1_MINC | //memory increment
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <usart2_init+0xc0>)
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <usart2_init+0xc0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f043 0392 	orr.w	r3, r3, #146	; 0x92
 80012de:	6013      	str	r3, [r2, #0]
								DMA_CCR1_DIR | //направление ПАМЯТЬ->Переферия
								DMA_CCR1_TCIE;//| //прерывание по окончании отправки
								//| DMA_CCR1_PL_1;// приоретет канала
		DMA1_Channel7->CPAR = (uint32_t)(&(USART2->DR));//адрес регистра для пересылки данных в переферии
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <usart2_init+0xc0>)
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <usart2_init+0xc4>)
 80012e4:	609a      	str	r2, [r3, #8]
		DMA1_Channel7->CNDTR = 0;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <usart2_init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
//		DMA1_Channel7->CCR |= DMA_CCR1_EN ;

//		NVIC_EnableIRQ (DMA1_Channel7_IRQn);

//		NVIC_EnableIRQ (USART2_IRQn);
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40004400 	.word	0x40004400
 8001300:	40020080 	.word	0x40020080
 8001304:	40004404 	.word	0x40004404

08001308 <sendStrToUart2>:

uint8_t sendStrToUart2(char *str, char size){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
	if(DMA1_Channel7->CNDTR) // ожидаем, пока закончится предыдущая передача данных
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <sendStrToUart2+0x48>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <sendStrToUart2+0x18>
		return 1; //busy
 800131c:	2301      	movs	r3, #1
 800131e:	e012      	b.n	8001346 <sendStrToUart2+0x3e>
	DMA1_Channel7->CCR &= ~DMA_CCR1_EN ; //выключаем 7 канал DMA для того, чтобы можно было изменять его настройки
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <sendStrToUart2+0x48>)
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <sendStrToUart2+0x48>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]
	DMA1_Channel7->CMAR = (uint32_t)(str); //memory address
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <sendStrToUart2+0x48>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = size ; // memory size (bytes)
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <sendStrToUart2+0x48>)
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	6053      	str	r3, [r2, #4]
	DMA1_Channel7->CCR |= DMA_CCR1_EN ; //enable Channel7 in DMA for transmit
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <sendStrToUart2+0x48>)
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <sendStrToUart2+0x48>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]
	return 0; //transfer begin
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40020080 	.word	0x40020080

08001354 <__libc_init_array>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	2500      	movs	r5, #0
 8001358:	4e0c      	ldr	r6, [pc, #48]	; (800138c <__libc_init_array+0x38>)
 800135a:	4c0d      	ldr	r4, [pc, #52]	; (8001390 <__libc_init_array+0x3c>)
 800135c:	1ba4      	subs	r4, r4, r6
 800135e:	10a4      	asrs	r4, r4, #2
 8001360:	42a5      	cmp	r5, r4
 8001362:	d109      	bne.n	8001378 <__libc_init_array+0x24>
 8001364:	f000 fc54 	bl	8001c10 <_init>
 8001368:	2500      	movs	r5, #0
 800136a:	4e0a      	ldr	r6, [pc, #40]	; (8001394 <__libc_init_array+0x40>)
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <__libc_init_array+0x44>)
 800136e:	1ba4      	subs	r4, r4, r6
 8001370:	10a4      	asrs	r4, r4, #2
 8001372:	42a5      	cmp	r5, r4
 8001374:	d105      	bne.n	8001382 <__libc_init_array+0x2e>
 8001376:	bd70      	pop	{r4, r5, r6, pc}
 8001378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800137c:	4798      	blx	r3
 800137e:	3501      	adds	r5, #1
 8001380:	e7ee      	b.n	8001360 <__libc_init_array+0xc>
 8001382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001386:	4798      	blx	r3
 8001388:	3501      	adds	r5, #1
 800138a:	e7f2      	b.n	8001372 <__libc_init_array+0x1e>
 800138c:	08001cdc 	.word	0x08001cdc
 8001390:	08001cdc 	.word	0x08001cdc
 8001394:	08001cdc 	.word	0x08001cdc
 8001398:	08001ce0 	.word	0x08001ce0

0800139c <memcpy>:
 800139c:	b510      	push	{r4, lr}
 800139e:	1e43      	subs	r3, r0, #1
 80013a0:	440a      	add	r2, r1
 80013a2:	4291      	cmp	r1, r2
 80013a4:	d100      	bne.n	80013a8 <memcpy+0xc>
 80013a6:	bd10      	pop	{r4, pc}
 80013a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013b0:	e7f7      	b.n	80013a2 <memcpy+0x6>
	...

080013b4 <siprintf>:
 80013b4:	b40e      	push	{r1, r2, r3}
 80013b6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80013ba:	b500      	push	{lr}
 80013bc:	b09c      	sub	sp, #112	; 0x70
 80013be:	f8ad 1014 	strh.w	r1, [sp, #20]
 80013c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80013c6:	9104      	str	r1, [sp, #16]
 80013c8:	9107      	str	r1, [sp, #28]
 80013ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013ce:	ab1d      	add	r3, sp, #116	; 0x74
 80013d0:	9002      	str	r0, [sp, #8]
 80013d2:	9006      	str	r0, [sp, #24]
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <siprintf+0x44>)
 80013d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80013da:	f8ad 1016 	strh.w	r1, [sp, #22]
 80013de:	6800      	ldr	r0, [r0, #0]
 80013e0:	a902      	add	r1, sp, #8
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f000 f866 	bl	80014b4 <_svfiprintf_r>
 80013e8:	2200      	movs	r2, #0
 80013ea:	9b02      	ldr	r3, [sp, #8]
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	b01c      	add	sp, #112	; 0x70
 80013f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80013f4:	b003      	add	sp, #12
 80013f6:	4770      	bx	lr
 80013f8:	2000002c 	.word	0x2000002c

080013fc <__ssputs_r>:
 80013fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001400:	688e      	ldr	r6, [r1, #8]
 8001402:	4682      	mov	sl, r0
 8001404:	429e      	cmp	r6, r3
 8001406:	460c      	mov	r4, r1
 8001408:	4691      	mov	r9, r2
 800140a:	4698      	mov	r8, r3
 800140c:	d835      	bhi.n	800147a <__ssputs_r+0x7e>
 800140e:	898a      	ldrh	r2, [r1, #12]
 8001410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001414:	d031      	beq.n	800147a <__ssputs_r+0x7e>
 8001416:	2302      	movs	r3, #2
 8001418:	6825      	ldr	r5, [r4, #0]
 800141a:	6909      	ldr	r1, [r1, #16]
 800141c:	1a6f      	subs	r7, r5, r1
 800141e:	6965      	ldr	r5, [r4, #20]
 8001420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001424:	fb95 f5f3 	sdiv	r5, r5, r3
 8001428:	f108 0301 	add.w	r3, r8, #1
 800142c:	443b      	add	r3, r7
 800142e:	429d      	cmp	r5, r3
 8001430:	bf38      	it	cc
 8001432:	461d      	movcc	r5, r3
 8001434:	0553      	lsls	r3, r2, #21
 8001436:	d531      	bpl.n	800149c <__ssputs_r+0xa0>
 8001438:	4629      	mov	r1, r5
 800143a:	f000 fb3b 	bl	8001ab4 <_malloc_r>
 800143e:	4606      	mov	r6, r0
 8001440:	b950      	cbnz	r0, 8001458 <__ssputs_r+0x5c>
 8001442:	230c      	movs	r3, #12
 8001444:	f8ca 3000 	str.w	r3, [sl]
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	f04f 30ff 	mov.w	r0, #4294967295
 800144e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001452:	81a3      	strh	r3, [r4, #12]
 8001454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001458:	463a      	mov	r2, r7
 800145a:	6921      	ldr	r1, [r4, #16]
 800145c:	f7ff ff9e 	bl	800139c <memcpy>
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146a:	81a3      	strh	r3, [r4, #12]
 800146c:	6126      	str	r6, [r4, #16]
 800146e:	443e      	add	r6, r7
 8001470:	6026      	str	r6, [r4, #0]
 8001472:	4646      	mov	r6, r8
 8001474:	6165      	str	r5, [r4, #20]
 8001476:	1bed      	subs	r5, r5, r7
 8001478:	60a5      	str	r5, [r4, #8]
 800147a:	4546      	cmp	r6, r8
 800147c:	bf28      	it	cs
 800147e:	4646      	movcs	r6, r8
 8001480:	4649      	mov	r1, r9
 8001482:	4632      	mov	r2, r6
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	f000 faaf 	bl	80019e8 <memmove>
 800148a:	68a3      	ldr	r3, [r4, #8]
 800148c:	2000      	movs	r0, #0
 800148e:	1b9b      	subs	r3, r3, r6
 8001490:	60a3      	str	r3, [r4, #8]
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	441e      	add	r6, r3
 8001496:	6026      	str	r6, [r4, #0]
 8001498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800149c:	462a      	mov	r2, r5
 800149e:	f000 fb67 	bl	8001b70 <_realloc_r>
 80014a2:	4606      	mov	r6, r0
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1e1      	bne.n	800146c <__ssputs_r+0x70>
 80014a8:	6921      	ldr	r1, [r4, #16]
 80014aa:	4650      	mov	r0, sl
 80014ac:	f000 fab6 	bl	8001a1c <_free_r>
 80014b0:	e7c7      	b.n	8001442 <__ssputs_r+0x46>
	...

080014b4 <_svfiprintf_r>:
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	b09d      	sub	sp, #116	; 0x74
 80014ba:	9303      	str	r3, [sp, #12]
 80014bc:	898b      	ldrh	r3, [r1, #12]
 80014be:	4680      	mov	r8, r0
 80014c0:	061c      	lsls	r4, r3, #24
 80014c2:	460d      	mov	r5, r1
 80014c4:	4616      	mov	r6, r2
 80014c6:	d50f      	bpl.n	80014e8 <_svfiprintf_r+0x34>
 80014c8:	690b      	ldr	r3, [r1, #16]
 80014ca:	b96b      	cbnz	r3, 80014e8 <_svfiprintf_r+0x34>
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	f000 faf1 	bl	8001ab4 <_malloc_r>
 80014d2:	6028      	str	r0, [r5, #0]
 80014d4:	6128      	str	r0, [r5, #16]
 80014d6:	b928      	cbnz	r0, 80014e4 <_svfiprintf_r+0x30>
 80014d8:	230c      	movs	r3, #12
 80014da:	f8c8 3000 	str.w	r3, [r8]
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	e0c4      	b.n	800166e <_svfiprintf_r+0x1ba>
 80014e4:	2340      	movs	r3, #64	; 0x40
 80014e6:	616b      	str	r3, [r5, #20]
 80014e8:	2300      	movs	r3, #0
 80014ea:	9309      	str	r3, [sp, #36]	; 0x24
 80014ec:	2320      	movs	r3, #32
 80014ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014f2:	2330      	movs	r3, #48	; 0x30
 80014f4:	f04f 0b01 	mov.w	fp, #1
 80014f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014fc:	4637      	mov	r7, r6
 80014fe:	463c      	mov	r4, r7
 8001500:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d13c      	bne.n	8001582 <_svfiprintf_r+0xce>
 8001508:	ebb7 0a06 	subs.w	sl, r7, r6
 800150c:	d00b      	beq.n	8001526 <_svfiprintf_r+0x72>
 800150e:	4653      	mov	r3, sl
 8001510:	4632      	mov	r2, r6
 8001512:	4629      	mov	r1, r5
 8001514:	4640      	mov	r0, r8
 8001516:	f7ff ff71 	bl	80013fc <__ssputs_r>
 800151a:	3001      	adds	r0, #1
 800151c:	f000 80a2 	beq.w	8001664 <_svfiprintf_r+0x1b0>
 8001520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001522:	4453      	add	r3, sl
 8001524:	9309      	str	r3, [sp, #36]	; 0x24
 8001526:	783b      	ldrb	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 809b 	beq.w	8001664 <_svfiprintf_r+0x1b0>
 800152e:	2300      	movs	r3, #0
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	9304      	str	r3, [sp, #16]
 8001536:	9307      	str	r3, [sp, #28]
 8001538:	9205      	str	r2, [sp, #20]
 800153a:	9306      	str	r3, [sp, #24]
 800153c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001540:	931a      	str	r3, [sp, #104]	; 0x68
 8001542:	2205      	movs	r2, #5
 8001544:	7821      	ldrb	r1, [r4, #0]
 8001546:	4850      	ldr	r0, [pc, #320]	; (8001688 <_svfiprintf_r+0x1d4>)
 8001548:	f000 fa40 	bl	80019cc <memchr>
 800154c:	1c67      	adds	r7, r4, #1
 800154e:	9b04      	ldr	r3, [sp, #16]
 8001550:	b9d8      	cbnz	r0, 800158a <_svfiprintf_r+0xd6>
 8001552:	06d9      	lsls	r1, r3, #27
 8001554:	bf44      	itt	mi
 8001556:	2220      	movmi	r2, #32
 8001558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800155c:	071a      	lsls	r2, r3, #28
 800155e:	bf44      	itt	mi
 8001560:	222b      	movmi	r2, #43	; 0x2b
 8001562:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001566:	7822      	ldrb	r2, [r4, #0]
 8001568:	2a2a      	cmp	r2, #42	; 0x2a
 800156a:	d016      	beq.n	800159a <_svfiprintf_r+0xe6>
 800156c:	2100      	movs	r1, #0
 800156e:	200a      	movs	r0, #10
 8001570:	9a07      	ldr	r2, [sp, #28]
 8001572:	4627      	mov	r7, r4
 8001574:	783b      	ldrb	r3, [r7, #0]
 8001576:	3401      	adds	r4, #1
 8001578:	3b30      	subs	r3, #48	; 0x30
 800157a:	2b09      	cmp	r3, #9
 800157c:	d950      	bls.n	8001620 <_svfiprintf_r+0x16c>
 800157e:	b1c9      	cbz	r1, 80015b4 <_svfiprintf_r+0x100>
 8001580:	e011      	b.n	80015a6 <_svfiprintf_r+0xf2>
 8001582:	2b25      	cmp	r3, #37	; 0x25
 8001584:	d0c0      	beq.n	8001508 <_svfiprintf_r+0x54>
 8001586:	4627      	mov	r7, r4
 8001588:	e7b9      	b.n	80014fe <_svfiprintf_r+0x4a>
 800158a:	4a3f      	ldr	r2, [pc, #252]	; (8001688 <_svfiprintf_r+0x1d4>)
 800158c:	463c      	mov	r4, r7
 800158e:	1a80      	subs	r0, r0, r2
 8001590:	fa0b f000 	lsl.w	r0, fp, r0
 8001594:	4318      	orrs	r0, r3
 8001596:	9004      	str	r0, [sp, #16]
 8001598:	e7d3      	b.n	8001542 <_svfiprintf_r+0x8e>
 800159a:	9a03      	ldr	r2, [sp, #12]
 800159c:	1d11      	adds	r1, r2, #4
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	9103      	str	r1, [sp, #12]
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	db01      	blt.n	80015aa <_svfiprintf_r+0xf6>
 80015a6:	9207      	str	r2, [sp, #28]
 80015a8:	e004      	b.n	80015b4 <_svfiprintf_r+0x100>
 80015aa:	4252      	negs	r2, r2
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	9207      	str	r2, [sp, #28]
 80015b2:	9304      	str	r3, [sp, #16]
 80015b4:	783b      	ldrb	r3, [r7, #0]
 80015b6:	2b2e      	cmp	r3, #46	; 0x2e
 80015b8:	d10d      	bne.n	80015d6 <_svfiprintf_r+0x122>
 80015ba:	787b      	ldrb	r3, [r7, #1]
 80015bc:	1c79      	adds	r1, r7, #1
 80015be:	2b2a      	cmp	r3, #42	; 0x2a
 80015c0:	d132      	bne.n	8001628 <_svfiprintf_r+0x174>
 80015c2:	9b03      	ldr	r3, [sp, #12]
 80015c4:	3702      	adds	r7, #2
 80015c6:	1d1a      	adds	r2, r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	9203      	str	r2, [sp, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfb8      	it	lt
 80015d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80015d4:	9305      	str	r3, [sp, #20]
 80015d6:	4c2d      	ldr	r4, [pc, #180]	; (800168c <_svfiprintf_r+0x1d8>)
 80015d8:	2203      	movs	r2, #3
 80015da:	7839      	ldrb	r1, [r7, #0]
 80015dc:	4620      	mov	r0, r4
 80015de:	f000 f9f5 	bl	80019cc <memchr>
 80015e2:	b138      	cbz	r0, 80015f4 <_svfiprintf_r+0x140>
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	1b00      	subs	r0, r0, r4
 80015e8:	fa03 f000 	lsl.w	r0, r3, r0
 80015ec:	9b04      	ldr	r3, [sp, #16]
 80015ee:	3701      	adds	r7, #1
 80015f0:	4303      	orrs	r3, r0
 80015f2:	9304      	str	r3, [sp, #16]
 80015f4:	7839      	ldrb	r1, [r7, #0]
 80015f6:	2206      	movs	r2, #6
 80015f8:	4825      	ldr	r0, [pc, #148]	; (8001690 <_svfiprintf_r+0x1dc>)
 80015fa:	1c7e      	adds	r6, r7, #1
 80015fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001600:	f000 f9e4 	bl	80019cc <memchr>
 8001604:	2800      	cmp	r0, #0
 8001606:	d035      	beq.n	8001674 <_svfiprintf_r+0x1c0>
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <_svfiprintf_r+0x1e0>)
 800160a:	b9fb      	cbnz	r3, 800164c <_svfiprintf_r+0x198>
 800160c:	9b03      	ldr	r3, [sp, #12]
 800160e:	3307      	adds	r3, #7
 8001610:	f023 0307 	bic.w	r3, r3, #7
 8001614:	3308      	adds	r3, #8
 8001616:	9303      	str	r3, [sp, #12]
 8001618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800161a:	444b      	add	r3, r9
 800161c:	9309      	str	r3, [sp, #36]	; 0x24
 800161e:	e76d      	b.n	80014fc <_svfiprintf_r+0x48>
 8001620:	fb00 3202 	mla	r2, r0, r2, r3
 8001624:	2101      	movs	r1, #1
 8001626:	e7a4      	b.n	8001572 <_svfiprintf_r+0xbe>
 8001628:	2300      	movs	r3, #0
 800162a:	240a      	movs	r4, #10
 800162c:	4618      	mov	r0, r3
 800162e:	9305      	str	r3, [sp, #20]
 8001630:	460f      	mov	r7, r1
 8001632:	783a      	ldrb	r2, [r7, #0]
 8001634:	3101      	adds	r1, #1
 8001636:	3a30      	subs	r2, #48	; 0x30
 8001638:	2a09      	cmp	r2, #9
 800163a:	d903      	bls.n	8001644 <_svfiprintf_r+0x190>
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ca      	beq.n	80015d6 <_svfiprintf_r+0x122>
 8001640:	9005      	str	r0, [sp, #20]
 8001642:	e7c8      	b.n	80015d6 <_svfiprintf_r+0x122>
 8001644:	fb04 2000 	mla	r0, r4, r0, r2
 8001648:	2301      	movs	r3, #1
 800164a:	e7f1      	b.n	8001630 <_svfiprintf_r+0x17c>
 800164c:	ab03      	add	r3, sp, #12
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	462a      	mov	r2, r5
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_svfiprintf_r+0x1e4>)
 8001654:	a904      	add	r1, sp, #16
 8001656:	4640      	mov	r0, r8
 8001658:	f3af 8000 	nop.w
 800165c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001660:	4681      	mov	r9, r0
 8001662:	d1d9      	bne.n	8001618 <_svfiprintf_r+0x164>
 8001664:	89ab      	ldrh	r3, [r5, #12]
 8001666:	065b      	lsls	r3, r3, #25
 8001668:	f53f af39 	bmi.w	80014de <_svfiprintf_r+0x2a>
 800166c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800166e:	b01d      	add	sp, #116	; 0x74
 8001670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001674:	ab03      	add	r3, sp, #12
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	462a      	mov	r2, r5
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_svfiprintf_r+0x1e4>)
 800167c:	a904      	add	r1, sp, #16
 800167e:	4640      	mov	r0, r8
 8001680:	f000 f884 	bl	800178c <_printf_i>
 8001684:	e7ea      	b.n	800165c <_svfiprintf_r+0x1a8>
 8001686:	bf00      	nop
 8001688:	08001ca7 	.word	0x08001ca7
 800168c:	08001cad 	.word	0x08001cad
 8001690:	08001cb1 	.word	0x08001cb1
 8001694:	00000000 	.word	0x00000000
 8001698:	080013fd 	.word	0x080013fd

0800169c <_printf_common>:
 800169c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016a0:	4691      	mov	r9, r2
 80016a2:	461f      	mov	r7, r3
 80016a4:	688a      	ldr	r2, [r1, #8]
 80016a6:	690b      	ldr	r3, [r1, #16]
 80016a8:	4606      	mov	r6, r0
 80016aa:	4293      	cmp	r3, r2
 80016ac:	bfb8      	it	lt
 80016ae:	4613      	movlt	r3, r2
 80016b0:	f8c9 3000 	str.w	r3, [r9]
 80016b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016b8:	460c      	mov	r4, r1
 80016ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016be:	b112      	cbz	r2, 80016c6 <_printf_common+0x2a>
 80016c0:	3301      	adds	r3, #1
 80016c2:	f8c9 3000 	str.w	r3, [r9]
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	0699      	lsls	r1, r3, #26
 80016ca:	bf42      	ittt	mi
 80016cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80016d0:	3302      	addmi	r3, #2
 80016d2:	f8c9 3000 	strmi.w	r3, [r9]
 80016d6:	6825      	ldr	r5, [r4, #0]
 80016d8:	f015 0506 	ands.w	r5, r5, #6
 80016dc:	d107      	bne.n	80016ee <_printf_common+0x52>
 80016de:	f104 0a19 	add.w	sl, r4, #25
 80016e2:	68e3      	ldr	r3, [r4, #12]
 80016e4:	f8d9 2000 	ldr.w	r2, [r9]
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	429d      	cmp	r5, r3
 80016ec:	db2a      	blt.n	8001744 <_printf_common+0xa8>
 80016ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80016f2:	6822      	ldr	r2, [r4, #0]
 80016f4:	3300      	adds	r3, #0
 80016f6:	bf18      	it	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	0692      	lsls	r2, r2, #26
 80016fc:	d42f      	bmi.n	800175e <_printf_common+0xc2>
 80016fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001702:	4639      	mov	r1, r7
 8001704:	4630      	mov	r0, r6
 8001706:	47c0      	blx	r8
 8001708:	3001      	adds	r0, #1
 800170a:	d022      	beq.n	8001752 <_printf_common+0xb6>
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	68e5      	ldr	r5, [r4, #12]
 8001710:	f003 0306 	and.w	r3, r3, #6
 8001714:	2b04      	cmp	r3, #4
 8001716:	bf18      	it	ne
 8001718:	2500      	movne	r5, #0
 800171a:	f8d9 2000 	ldr.w	r2, [r9]
 800171e:	f04f 0900 	mov.w	r9, #0
 8001722:	bf08      	it	eq
 8001724:	1aad      	subeq	r5, r5, r2
 8001726:	68a3      	ldr	r3, [r4, #8]
 8001728:	6922      	ldr	r2, [r4, #16]
 800172a:	bf08      	it	eq
 800172c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001730:	4293      	cmp	r3, r2
 8001732:	bfc4      	itt	gt
 8001734:	1a9b      	subgt	r3, r3, r2
 8001736:	18ed      	addgt	r5, r5, r3
 8001738:	341a      	adds	r4, #26
 800173a:	454d      	cmp	r5, r9
 800173c:	d11b      	bne.n	8001776 <_printf_common+0xda>
 800173e:	2000      	movs	r0, #0
 8001740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001744:	2301      	movs	r3, #1
 8001746:	4652      	mov	r2, sl
 8001748:	4639      	mov	r1, r7
 800174a:	4630      	mov	r0, r6
 800174c:	47c0      	blx	r8
 800174e:	3001      	adds	r0, #1
 8001750:	d103      	bne.n	800175a <_printf_common+0xbe>
 8001752:	f04f 30ff 	mov.w	r0, #4294967295
 8001756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800175a:	3501      	adds	r5, #1
 800175c:	e7c1      	b.n	80016e2 <_printf_common+0x46>
 800175e:	2030      	movs	r0, #48	; 0x30
 8001760:	18e1      	adds	r1, r4, r3
 8001762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800176c:	4422      	add	r2, r4
 800176e:	3302      	adds	r3, #2
 8001770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001774:	e7c3      	b.n	80016fe <_printf_common+0x62>
 8001776:	2301      	movs	r3, #1
 8001778:	4622      	mov	r2, r4
 800177a:	4639      	mov	r1, r7
 800177c:	4630      	mov	r0, r6
 800177e:	47c0      	blx	r8
 8001780:	3001      	adds	r0, #1
 8001782:	d0e6      	beq.n	8001752 <_printf_common+0xb6>
 8001784:	f109 0901 	add.w	r9, r9, #1
 8001788:	e7d7      	b.n	800173a <_printf_common+0x9e>
	...

0800178c <_printf_i>:
 800178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001790:	4617      	mov	r7, r2
 8001792:	7e0a      	ldrb	r2, [r1, #24]
 8001794:	b085      	sub	sp, #20
 8001796:	2a6e      	cmp	r2, #110	; 0x6e
 8001798:	4698      	mov	r8, r3
 800179a:	4606      	mov	r6, r0
 800179c:	460c      	mov	r4, r1
 800179e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80017a4:	f000 80bc 	beq.w	8001920 <_printf_i+0x194>
 80017a8:	d81a      	bhi.n	80017e0 <_printf_i+0x54>
 80017aa:	2a63      	cmp	r2, #99	; 0x63
 80017ac:	d02e      	beq.n	800180c <_printf_i+0x80>
 80017ae:	d80a      	bhi.n	80017c6 <_printf_i+0x3a>
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	f000 80c8 	beq.w	8001946 <_printf_i+0x1ba>
 80017b6:	2a58      	cmp	r2, #88	; 0x58
 80017b8:	f000 808a 	beq.w	80018d0 <_printf_i+0x144>
 80017bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80017c4:	e02a      	b.n	800181c <_printf_i+0x90>
 80017c6:	2a64      	cmp	r2, #100	; 0x64
 80017c8:	d001      	beq.n	80017ce <_printf_i+0x42>
 80017ca:	2a69      	cmp	r2, #105	; 0x69
 80017cc:	d1f6      	bne.n	80017bc <_printf_i+0x30>
 80017ce:	6821      	ldr	r1, [r4, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017d6:	d023      	beq.n	8001820 <_printf_i+0x94>
 80017d8:	1d11      	adds	r1, r2, #4
 80017da:	6019      	str	r1, [r3, #0]
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	e027      	b.n	8001830 <_printf_i+0xa4>
 80017e0:	2a73      	cmp	r2, #115	; 0x73
 80017e2:	f000 80b4 	beq.w	800194e <_printf_i+0x1c2>
 80017e6:	d808      	bhi.n	80017fa <_printf_i+0x6e>
 80017e8:	2a6f      	cmp	r2, #111	; 0x6f
 80017ea:	d02a      	beq.n	8001842 <_printf_i+0xb6>
 80017ec:	2a70      	cmp	r2, #112	; 0x70
 80017ee:	d1e5      	bne.n	80017bc <_printf_i+0x30>
 80017f0:	680a      	ldr	r2, [r1, #0]
 80017f2:	f042 0220 	orr.w	r2, r2, #32
 80017f6:	600a      	str	r2, [r1, #0]
 80017f8:	e003      	b.n	8001802 <_printf_i+0x76>
 80017fa:	2a75      	cmp	r2, #117	; 0x75
 80017fc:	d021      	beq.n	8001842 <_printf_i+0xb6>
 80017fe:	2a78      	cmp	r2, #120	; 0x78
 8001800:	d1dc      	bne.n	80017bc <_printf_i+0x30>
 8001802:	2278      	movs	r2, #120	; 0x78
 8001804:	496f      	ldr	r1, [pc, #444]	; (80019c4 <_printf_i+0x238>)
 8001806:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800180a:	e064      	b.n	80018d6 <_printf_i+0x14a>
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001812:	1d11      	adds	r1, r2, #4
 8001814:	6019      	str	r1, [r3, #0]
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800181c:	2301      	movs	r3, #1
 800181e:	e0a3      	b.n	8001968 <_printf_i+0x1dc>
 8001820:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001824:	f102 0104 	add.w	r1, r2, #4
 8001828:	6019      	str	r1, [r3, #0]
 800182a:	d0d7      	beq.n	80017dc <_printf_i+0x50>
 800182c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da03      	bge.n	800183c <_printf_i+0xb0>
 8001834:	222d      	movs	r2, #45	; 0x2d
 8001836:	425b      	negs	r3, r3
 8001838:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800183c:	4962      	ldr	r1, [pc, #392]	; (80019c8 <_printf_i+0x23c>)
 800183e:	220a      	movs	r2, #10
 8001840:	e017      	b.n	8001872 <_printf_i+0xe6>
 8001842:	6820      	ldr	r0, [r4, #0]
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	f010 0f80 	tst.w	r0, #128	; 0x80
 800184a:	d003      	beq.n	8001854 <_printf_i+0xc8>
 800184c:	1d08      	adds	r0, r1, #4
 800184e:	6018      	str	r0, [r3, #0]
 8001850:	680b      	ldr	r3, [r1, #0]
 8001852:	e006      	b.n	8001862 <_printf_i+0xd6>
 8001854:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001858:	f101 0004 	add.w	r0, r1, #4
 800185c:	6018      	str	r0, [r3, #0]
 800185e:	d0f7      	beq.n	8001850 <_printf_i+0xc4>
 8001860:	880b      	ldrh	r3, [r1, #0]
 8001862:	2a6f      	cmp	r2, #111	; 0x6f
 8001864:	bf14      	ite	ne
 8001866:	220a      	movne	r2, #10
 8001868:	2208      	moveq	r2, #8
 800186a:	4957      	ldr	r1, [pc, #348]	; (80019c8 <_printf_i+0x23c>)
 800186c:	2000      	movs	r0, #0
 800186e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001872:	6865      	ldr	r5, [r4, #4]
 8001874:	2d00      	cmp	r5, #0
 8001876:	60a5      	str	r5, [r4, #8]
 8001878:	f2c0 809c 	blt.w	80019b4 <_printf_i+0x228>
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	f020 0004 	bic.w	r0, r0, #4
 8001882:	6020      	str	r0, [r4, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d13f      	bne.n	8001908 <_printf_i+0x17c>
 8001888:	2d00      	cmp	r5, #0
 800188a:	f040 8095 	bne.w	80019b8 <_printf_i+0x22c>
 800188e:	4675      	mov	r5, lr
 8001890:	2a08      	cmp	r2, #8
 8001892:	d10b      	bne.n	80018ac <_printf_i+0x120>
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	07da      	lsls	r2, r3, #31
 8001898:	d508      	bpl.n	80018ac <_printf_i+0x120>
 800189a:	6923      	ldr	r3, [r4, #16]
 800189c:	6862      	ldr	r2, [r4, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	bfde      	ittt	le
 80018a2:	2330      	movle	r3, #48	; 0x30
 80018a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018ac:	ebae 0305 	sub.w	r3, lr, r5
 80018b0:	6123      	str	r3, [r4, #16]
 80018b2:	f8cd 8000 	str.w	r8, [sp]
 80018b6:	463b      	mov	r3, r7
 80018b8:	aa03      	add	r2, sp, #12
 80018ba:	4621      	mov	r1, r4
 80018bc:	4630      	mov	r0, r6
 80018be:	f7ff feed 	bl	800169c <_printf_common>
 80018c2:	3001      	adds	r0, #1
 80018c4:	d155      	bne.n	8001972 <_printf_i+0x1e6>
 80018c6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ca:	b005      	add	sp, #20
 80018cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80018d4:	493c      	ldr	r1, [pc, #240]	; (80019c8 <_printf_i+0x23c>)
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80018de:	f100 0504 	add.w	r5, r0, #4
 80018e2:	601d      	str	r5, [r3, #0]
 80018e4:	d001      	beq.n	80018ea <_printf_i+0x15e>
 80018e6:	6803      	ldr	r3, [r0, #0]
 80018e8:	e002      	b.n	80018f0 <_printf_i+0x164>
 80018ea:	0655      	lsls	r5, r2, #25
 80018ec:	d5fb      	bpl.n	80018e6 <_printf_i+0x15a>
 80018ee:	8803      	ldrh	r3, [r0, #0]
 80018f0:	07d0      	lsls	r0, r2, #31
 80018f2:	bf44      	itt	mi
 80018f4:	f042 0220 	orrmi.w	r2, r2, #32
 80018f8:	6022      	strmi	r2, [r4, #0]
 80018fa:	b91b      	cbnz	r3, 8001904 <_printf_i+0x178>
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	f022 0220 	bic.w	r2, r2, #32
 8001902:	6022      	str	r2, [r4, #0]
 8001904:	2210      	movs	r2, #16
 8001906:	e7b1      	b.n	800186c <_printf_i+0xe0>
 8001908:	4675      	mov	r5, lr
 800190a:	fbb3 f0f2 	udiv	r0, r3, r2
 800190e:	fb02 3310 	mls	r3, r2, r0, r3
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001918:	4603      	mov	r3, r0
 800191a:	2800      	cmp	r0, #0
 800191c:	d1f5      	bne.n	800190a <_printf_i+0x17e>
 800191e:	e7b7      	b.n	8001890 <_printf_i+0x104>
 8001920:	6808      	ldr	r0, [r1, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001928:	6949      	ldr	r1, [r1, #20]
 800192a:	d004      	beq.n	8001936 <_printf_i+0x1aa>
 800192c:	1d10      	adds	r0, r2, #4
 800192e:	6018      	str	r0, [r3, #0]
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	6019      	str	r1, [r3, #0]
 8001934:	e007      	b.n	8001946 <_printf_i+0x1ba>
 8001936:	f010 0f40 	tst.w	r0, #64	; 0x40
 800193a:	f102 0004 	add.w	r0, r2, #4
 800193e:	6018      	str	r0, [r3, #0]
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	d0f6      	beq.n	8001932 <_printf_i+0x1a6>
 8001944:	8019      	strh	r1, [r3, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	4675      	mov	r5, lr
 800194a:	6123      	str	r3, [r4, #16]
 800194c:	e7b1      	b.n	80018b2 <_printf_i+0x126>
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	1d11      	adds	r1, r2, #4
 8001952:	6019      	str	r1, [r3, #0]
 8001954:	6815      	ldr	r5, [r2, #0]
 8001956:	2100      	movs	r1, #0
 8001958:	6862      	ldr	r2, [r4, #4]
 800195a:	4628      	mov	r0, r5
 800195c:	f000 f836 	bl	80019cc <memchr>
 8001960:	b108      	cbz	r0, 8001966 <_printf_i+0x1da>
 8001962:	1b40      	subs	r0, r0, r5
 8001964:	6060      	str	r0, [r4, #4]
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	6123      	str	r3, [r4, #16]
 800196a:	2300      	movs	r3, #0
 800196c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001970:	e79f      	b.n	80018b2 <_printf_i+0x126>
 8001972:	6923      	ldr	r3, [r4, #16]
 8001974:	462a      	mov	r2, r5
 8001976:	4639      	mov	r1, r7
 8001978:	4630      	mov	r0, r6
 800197a:	47c0      	blx	r8
 800197c:	3001      	adds	r0, #1
 800197e:	d0a2      	beq.n	80018c6 <_printf_i+0x13a>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	079b      	lsls	r3, r3, #30
 8001984:	d507      	bpl.n	8001996 <_printf_i+0x20a>
 8001986:	2500      	movs	r5, #0
 8001988:	f104 0919 	add.w	r9, r4, #25
 800198c:	68e3      	ldr	r3, [r4, #12]
 800198e:	9a03      	ldr	r2, [sp, #12]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	429d      	cmp	r5, r3
 8001994:	db05      	blt.n	80019a2 <_printf_i+0x216>
 8001996:	68e0      	ldr	r0, [r4, #12]
 8001998:	9b03      	ldr	r3, [sp, #12]
 800199a:	4298      	cmp	r0, r3
 800199c:	bfb8      	it	lt
 800199e:	4618      	movlt	r0, r3
 80019a0:	e793      	b.n	80018ca <_printf_i+0x13e>
 80019a2:	2301      	movs	r3, #1
 80019a4:	464a      	mov	r2, r9
 80019a6:	4639      	mov	r1, r7
 80019a8:	4630      	mov	r0, r6
 80019aa:	47c0      	blx	r8
 80019ac:	3001      	adds	r0, #1
 80019ae:	d08a      	beq.n	80018c6 <_printf_i+0x13a>
 80019b0:	3501      	adds	r5, #1
 80019b2:	e7eb      	b.n	800198c <_printf_i+0x200>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1a7      	bne.n	8001908 <_printf_i+0x17c>
 80019b8:	780b      	ldrb	r3, [r1, #0]
 80019ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019c2:	e765      	b.n	8001890 <_printf_i+0x104>
 80019c4:	08001cc9 	.word	0x08001cc9
 80019c8:	08001cb8 	.word	0x08001cb8

080019cc <memchr>:
 80019cc:	b510      	push	{r4, lr}
 80019ce:	b2c9      	uxtb	r1, r1
 80019d0:	4402      	add	r2, r0
 80019d2:	4290      	cmp	r0, r2
 80019d4:	4603      	mov	r3, r0
 80019d6:	d101      	bne.n	80019dc <memchr+0x10>
 80019d8:	2000      	movs	r0, #0
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	781c      	ldrb	r4, [r3, #0]
 80019de:	3001      	adds	r0, #1
 80019e0:	428c      	cmp	r4, r1
 80019e2:	d1f6      	bne.n	80019d2 <memchr+0x6>
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd10      	pop	{r4, pc}

080019e8 <memmove>:
 80019e8:	4288      	cmp	r0, r1
 80019ea:	b510      	push	{r4, lr}
 80019ec:	eb01 0302 	add.w	r3, r1, r2
 80019f0:	d803      	bhi.n	80019fa <memmove+0x12>
 80019f2:	1e42      	subs	r2, r0, #1
 80019f4:	4299      	cmp	r1, r3
 80019f6:	d10c      	bne.n	8001a12 <memmove+0x2a>
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	4298      	cmp	r0, r3
 80019fc:	d2f9      	bcs.n	80019f2 <memmove+0xa>
 80019fe:	1881      	adds	r1, r0, r2
 8001a00:	1ad2      	subs	r2, r2, r3
 8001a02:	42d3      	cmn	r3, r2
 8001a04:	d100      	bne.n	8001a08 <memmove+0x20>
 8001a06:	bd10      	pop	{r4, pc}
 8001a08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001a10:	e7f7      	b.n	8001a02 <memmove+0x1a>
 8001a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001a1a:	e7eb      	b.n	80019f4 <memmove+0xc>

08001a1c <_free_r>:
 8001a1c:	b538      	push	{r3, r4, r5, lr}
 8001a1e:	4605      	mov	r5, r0
 8001a20:	2900      	cmp	r1, #0
 8001a22:	d043      	beq.n	8001aac <_free_r+0x90>
 8001a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a28:	1f0c      	subs	r4, r1, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bfb8      	it	lt
 8001a2e:	18e4      	addlt	r4, r4, r3
 8001a30:	f000 f8d4 	bl	8001bdc <__malloc_lock>
 8001a34:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <_free_r+0x94>)
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	4610      	mov	r0, r2
 8001a3a:	b933      	cbnz	r3, 8001a4a <_free_r+0x2e>
 8001a3c:	6063      	str	r3, [r4, #4]
 8001a3e:	6014      	str	r4, [r2, #0]
 8001a40:	4628      	mov	r0, r5
 8001a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a46:	f000 b8ca 	b.w	8001bde <__malloc_unlock>
 8001a4a:	42a3      	cmp	r3, r4
 8001a4c:	d90b      	bls.n	8001a66 <_free_r+0x4a>
 8001a4e:	6821      	ldr	r1, [r4, #0]
 8001a50:	1862      	adds	r2, r4, r1
 8001a52:	4293      	cmp	r3, r2
 8001a54:	bf01      	itttt	eq
 8001a56:	681a      	ldreq	r2, [r3, #0]
 8001a58:	685b      	ldreq	r3, [r3, #4]
 8001a5a:	1852      	addeq	r2, r2, r1
 8001a5c:	6022      	streq	r2, [r4, #0]
 8001a5e:	6063      	str	r3, [r4, #4]
 8001a60:	6004      	str	r4, [r0, #0]
 8001a62:	e7ed      	b.n	8001a40 <_free_r+0x24>
 8001a64:	4613      	mov	r3, r2
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	b10a      	cbz	r2, 8001a6e <_free_r+0x52>
 8001a6a:	42a2      	cmp	r2, r4
 8001a6c:	d9fa      	bls.n	8001a64 <_free_r+0x48>
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	1858      	adds	r0, r3, r1
 8001a72:	42a0      	cmp	r0, r4
 8001a74:	d10b      	bne.n	8001a8e <_free_r+0x72>
 8001a76:	6820      	ldr	r0, [r4, #0]
 8001a78:	4401      	add	r1, r0
 8001a7a:	1858      	adds	r0, r3, r1
 8001a7c:	4282      	cmp	r2, r0
 8001a7e:	6019      	str	r1, [r3, #0]
 8001a80:	d1de      	bne.n	8001a40 <_free_r+0x24>
 8001a82:	6810      	ldr	r0, [r2, #0]
 8001a84:	6852      	ldr	r2, [r2, #4]
 8001a86:	4401      	add	r1, r0
 8001a88:	6019      	str	r1, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	e7d8      	b.n	8001a40 <_free_r+0x24>
 8001a8e:	d902      	bls.n	8001a96 <_free_r+0x7a>
 8001a90:	230c      	movs	r3, #12
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	e7d4      	b.n	8001a40 <_free_r+0x24>
 8001a96:	6820      	ldr	r0, [r4, #0]
 8001a98:	1821      	adds	r1, r4, r0
 8001a9a:	428a      	cmp	r2, r1
 8001a9c:	bf01      	itttt	eq
 8001a9e:	6811      	ldreq	r1, [r2, #0]
 8001aa0:	6852      	ldreq	r2, [r2, #4]
 8001aa2:	1809      	addeq	r1, r1, r0
 8001aa4:	6021      	streq	r1, [r4, #0]
 8001aa6:	6062      	str	r2, [r4, #4]
 8001aa8:	605c      	str	r4, [r3, #4]
 8001aaa:	e7c9      	b.n	8001a40 <_free_r+0x24>
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
 8001aae:	bf00      	nop
 8001ab0:	200000c4 	.word	0x200000c4

08001ab4 <_malloc_r>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	1ccd      	adds	r5, r1, #3
 8001ab8:	f025 0503 	bic.w	r5, r5, #3
 8001abc:	3508      	adds	r5, #8
 8001abe:	2d0c      	cmp	r5, #12
 8001ac0:	bf38      	it	cc
 8001ac2:	250c      	movcc	r5, #12
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	4606      	mov	r6, r0
 8001ac8:	db01      	blt.n	8001ace <_malloc_r+0x1a>
 8001aca:	42a9      	cmp	r1, r5
 8001acc:	d903      	bls.n	8001ad6 <_malloc_r+0x22>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	6033      	str	r3, [r6, #0]
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
 8001ad6:	f000 f881 	bl	8001bdc <__malloc_lock>
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <_malloc_r+0xb4>)
 8001adc:	6814      	ldr	r4, [r2, #0]
 8001ade:	4621      	mov	r1, r4
 8001ae0:	b991      	cbnz	r1, 8001b08 <_malloc_r+0x54>
 8001ae2:	4c22      	ldr	r4, [pc, #136]	; (8001b6c <_malloc_r+0xb8>)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	b91b      	cbnz	r3, 8001af0 <_malloc_r+0x3c>
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f000 f867 	bl	8001bbc <_sbrk_r>
 8001aee:	6020      	str	r0, [r4, #0]
 8001af0:	4629      	mov	r1, r5
 8001af2:	4630      	mov	r0, r6
 8001af4:	f000 f862 	bl	8001bbc <_sbrk_r>
 8001af8:	1c43      	adds	r3, r0, #1
 8001afa:	d126      	bne.n	8001b4a <_malloc_r+0x96>
 8001afc:	230c      	movs	r3, #12
 8001afe:	4630      	mov	r0, r6
 8001b00:	6033      	str	r3, [r6, #0]
 8001b02:	f000 f86c 	bl	8001bde <__malloc_unlock>
 8001b06:	e7e4      	b.n	8001ad2 <_malloc_r+0x1e>
 8001b08:	680b      	ldr	r3, [r1, #0]
 8001b0a:	1b5b      	subs	r3, r3, r5
 8001b0c:	d41a      	bmi.n	8001b44 <_malloc_r+0x90>
 8001b0e:	2b0b      	cmp	r3, #11
 8001b10:	d90f      	bls.n	8001b32 <_malloc_r+0x7e>
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	18cc      	adds	r4, r1, r3
 8001b16:	50cd      	str	r5, [r1, r3]
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f000 f860 	bl	8001bde <__malloc_unlock>
 8001b1e:	f104 000b 	add.w	r0, r4, #11
 8001b22:	1d23      	adds	r3, r4, #4
 8001b24:	f020 0007 	bic.w	r0, r0, #7
 8001b28:	1ac3      	subs	r3, r0, r3
 8001b2a:	d01b      	beq.n	8001b64 <_malloc_r+0xb0>
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	50e2      	str	r2, [r4, r3]
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
 8001b32:	428c      	cmp	r4, r1
 8001b34:	bf0b      	itete	eq
 8001b36:	6863      	ldreq	r3, [r4, #4]
 8001b38:	684b      	ldrne	r3, [r1, #4]
 8001b3a:	6013      	streq	r3, [r2, #0]
 8001b3c:	6063      	strne	r3, [r4, #4]
 8001b3e:	bf18      	it	ne
 8001b40:	460c      	movne	r4, r1
 8001b42:	e7e9      	b.n	8001b18 <_malloc_r+0x64>
 8001b44:	460c      	mov	r4, r1
 8001b46:	6849      	ldr	r1, [r1, #4]
 8001b48:	e7ca      	b.n	8001ae0 <_malloc_r+0x2c>
 8001b4a:	1cc4      	adds	r4, r0, #3
 8001b4c:	f024 0403 	bic.w	r4, r4, #3
 8001b50:	42a0      	cmp	r0, r4
 8001b52:	d005      	beq.n	8001b60 <_malloc_r+0xac>
 8001b54:	1a21      	subs	r1, r4, r0
 8001b56:	4630      	mov	r0, r6
 8001b58:	f000 f830 	bl	8001bbc <_sbrk_r>
 8001b5c:	3001      	adds	r0, #1
 8001b5e:	d0cd      	beq.n	8001afc <_malloc_r+0x48>
 8001b60:	6025      	str	r5, [r4, #0]
 8001b62:	e7d9      	b.n	8001b18 <_malloc_r+0x64>
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	bf00      	nop
 8001b68:	200000c4 	.word	0x200000c4
 8001b6c:	200000c8 	.word	0x200000c8

08001b70 <_realloc_r>:
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	4607      	mov	r7, r0
 8001b74:	4614      	mov	r4, r2
 8001b76:	460e      	mov	r6, r1
 8001b78:	b921      	cbnz	r1, 8001b84 <_realloc_r+0x14>
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001b80:	f7ff bf98 	b.w	8001ab4 <_malloc_r>
 8001b84:	b922      	cbnz	r2, 8001b90 <_realloc_r+0x20>
 8001b86:	f7ff ff49 	bl	8001a1c <_free_r>
 8001b8a:	4625      	mov	r5, r4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b90:	f000 f826 	bl	8001be0 <_malloc_usable_size_r>
 8001b94:	4284      	cmp	r4, r0
 8001b96:	d90f      	bls.n	8001bb8 <_realloc_r+0x48>
 8001b98:	4621      	mov	r1, r4
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	f7ff ff8a 	bl	8001ab4 <_malloc_r>
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d0f2      	beq.n	8001b8c <_realloc_r+0x1c>
 8001ba6:	4631      	mov	r1, r6
 8001ba8:	4622      	mov	r2, r4
 8001baa:	f7ff fbf7 	bl	800139c <memcpy>
 8001bae:	4631      	mov	r1, r6
 8001bb0:	4638      	mov	r0, r7
 8001bb2:	f7ff ff33 	bl	8001a1c <_free_r>
 8001bb6:	e7e9      	b.n	8001b8c <_realloc_r+0x1c>
 8001bb8:	4635      	mov	r5, r6
 8001bba:	e7e7      	b.n	8001b8c <_realloc_r+0x1c>

08001bbc <_sbrk_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	4c05      	ldr	r4, [pc, #20]	; (8001bd8 <_sbrk_r+0x1c>)
 8001bc2:	4605      	mov	r5, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	6023      	str	r3, [r4, #0]
 8001bc8:	f000 f814 	bl	8001bf4 <_sbrk>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_sbrk_r+0x1a>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_sbrk_r+0x1a>
 8001bd4:	602b      	str	r3, [r5, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	200000f4 	.word	0x200000f4

08001bdc <__malloc_lock>:
 8001bdc:	4770      	bx	lr

08001bde <__malloc_unlock>:
 8001bde:	4770      	bx	lr

08001be0 <_malloc_usable_size_r>:
 8001be0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001be4:	2800      	cmp	r0, #0
 8001be6:	f1a0 0004 	sub.w	r0, r0, #4
 8001bea:	bfbc      	itt	lt
 8001bec:	580b      	ldrlt	r3, [r1, r0]
 8001bee:	18c0      	addlt	r0, r0, r3
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_sbrk>:
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <_sbrk+0x14>)
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	b909      	cbnz	r1, 8001c00 <_sbrk+0xc>
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <_sbrk+0x18>)
 8001bfe:	6019      	str	r1, [r3, #0]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	4402      	add	r2, r0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4770      	bx	lr
 8001c08:	200000cc 	.word	0x200000cc
 8001c0c:	200000f8 	.word	0x200000f8

08001c10 <_init>:
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	bf00      	nop
 8001c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c16:	bc08      	pop	{r3}
 8001c18:	469e      	mov	lr, r3
 8001c1a:	4770      	bx	lr

08001c1c <_fini>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr
